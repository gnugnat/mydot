#+TITLE: My Primary Emacs Config in Org
#+STARTUP: content inlineimages
#+OPTIONS: toc:nil num:nil
#+REVEAL_THEME: black
[[./img/Noise_Marine_Transparent.png]]
* Environment
** Auto Update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-interval 5
          auto-package-update-delete-old-verions t)
    (auto-package-update-maybe)
    )
#+END_SRC
** Edit/Reload configuration
#+BEGIN_SRC emacs-lisp
  ;; Edit config.org
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org" )
    )
  (global-set-key (kbd "C-c e") 'config-visit)
  ;; Reload config.org at runtime
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org" ))
    )
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Keybinding Help
   Key binding hints
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    )
#+END_SRC
** Minor
   Some small tweaks that don't require packages
#+BEGIN_SRC emacs-lisp
  ;; no toolbar:
  (tool-bar-mode -1)
  ;; no menubar:
  ;;;; can still be accessed with F10
  (menu-bar-mode -1)
  ;; no scrollbar:
  (when window-system (scroll-bar-mode -1))
  ;; line numbers:
  (global-display-line-numbers-mode 1)
  ;; scrolling:
  (setq scroll-conservatively 100)
  ;; no "bell" (audible notification):
  (setq ring-bell-function 'ignore)
  ;; highlight:
  (when window-system (global-hl-line-mode t))
  ;; prettify (lambda to icon):
  (when window-system (global-prettify-symbols-mode t))
  ;; use mouse in xterm
  (xterm-mouse-mode)
  ;; auto reloading (reverting) buffers
  (global-auto-revert-mode 1)
  ;; disable lock files:
  (setq create-lockfiles nil)
  ;; disable autosave:
  (setq auto-save-default nil)
  ;; disable backups:
  (setq make-backup-files nil)
  ;; backups directory:
  ;;(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
  ;; Pass "y or n" instead of "yes or no"
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Disable clipboard
  (setq x-select-enable-clipboard-manager nil)
#+END_SRC
** Recent Files
   Show a list of recently opened files with =C-c f=
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 20)
  (global-set-key (kbd "C-c f") 'recentf-open-files)
#+END_SRC
** Zoom with Scroll
#+BEGIN_SRC emacs-lisp
  ;; Control & Scroll Up - Increase
  (global-set-key [C-mouse-4] 'text-scale-increase)
  ;; Control & Scroll Down - Decrease
  (global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC
* Buffers & Windows
** Expert mode
   Kill buffers (while in menu for switching buffers; pass d on a buffer, x confirmes) without confirmation (y or n)
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
** Following window splits
   Better window splitting
#+BEGIN_SRC emacs-lisp
  ;; horizontal
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  ;; vertical
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Ibuffer
   Better switching
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** IDO mode
   Buffer stuff
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil
        ido-create-new-buffer 'always
        ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** IDO switch buffers
   Better buffer switching
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
** IDO vertically
   Better positioning
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    )
#+END_SRC
** Kill and remove split
   Kill buffer and delete its window
#+BEGIN_SRC emacs-lisp
  (defun kill-and-remove-split ()
    (interactive)
    (kill-buffer)
    (delete-window)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x x") 'kill-and-remove-split)
#+END_SRC
** Smex config
   Run known programs faster
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex)
    )
#+END_SRC
** Switch-window
   Faster window switching, when you press =C-x o= you choose a window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer
          switch-window-increase 4
          switch-window-threshold 2
          switch-window-shortcut-style 'qwerty
          switch-window-qwerty-shortcuts
          '( "a" "s" "d" "f" "g" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window)
    )
#+END_SRC
* Look
** Font
   Credit: https://www.emacswiki.org/emacs/SetFonts
#+BEGIN_SRC emacs-lisp
  ;; Fallback to another font if first is unavalible
  (require 'dash)
  (defun font-candidate (&rest fonts)
    "Return the first available font."
    (--first
     (find-font (font-spec :name it)) fonts
     )
    )

  ;; List of fonts
  (when window-system
    (set-face-attribute
     'default nil
     :weight 'normal
     :width 'normal
     :height 105
     :font (font-candidate
            "Dina"
            "xos4 Terminus"
            "Terminus"
            "Hack"
            "Monospace"
            "Consolas"
            )
     )
    )
#+END_SRC
** Spaceline
   Mode line ([[https://www.spacemacs.org/doc/DOCUMENTATION#text-powerline-separators][separators]])
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator 'wave)
    (spaceline-spacemacs-theme)
    )
#+END_SRC
** Theme
   Install spacemacs-theme if not installed
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'spacemacs-theme)
    (package-refresh-contents)
    (package-install 'spacemacs-theme)
    )
  (load-theme 'spacemacs-dark t)
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
  ;; Set transparency
  (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
  (add-to-list 'default-frame-alist '(alpha . (95 . 80)))

  ;; You can use the following snippet after you've set the alpha as above to assign a toggle to "C-c t"
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql
            (cond ((numberp alpha) alpha)
                  ((numberp (cdr alpha)) (cdr alpha))
                  ;; Also handle undocumented (<active> <inactive>) form.
                  ((numberp (cadr alpha)) (cadr alpha))
                  )
            100)
           '(95 . 80) '(100 . 100)
           )
       )
      )
    )

  (global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC
** Window Size
   Should work well with 88 x 36
#+BEGIN_SRC emacs-lisp
  (when window-system
    (set-frame-size (selected-frame) 88 36)
    )
#+END_SRC
* File Editing
** Avy
   Easier search inside files - after pressung binded keys, pass a letter, then pass symbols for the highlighted letter to which you want to go to
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char)
    )
#+END_SRC
** Beacon mode
   Line highlight when switching
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    )
#+END_SRC
** Encoding
   Set encoding to UTF-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** Insert Date
   In non-Org documents:
     - =C-c d= :         13.04.2004
     - =C-u C-c d= :     2004-04-13
     - =C-u C-u C-c d= : Dienstag, 13. April 2004
#+BEGIN_SRC emacs-lisp
  (defun insert-date (prefix)
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%d.%m.%Y")
                   ((equal prefix '(4)) "%Y-%m-%d")
                   ((equal prefix '(16)) "%A, %d. %B %Y")
                   )
                  )
          (system-time-locale "pl_PL")
          )
      (insert (format-time-string format))
      )
    )
  (global-set-key (kbd "C-c d") 'insert-date)
#+END_SRC
** Magit
   Git management
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil
          git-commit-summary-max-length 50)
    :bind
    (
     ("C-c s" . magit-status)
     ("C-c b" . magit-blame)
     )
    )
#+END_SRC
** Projectile
   Project management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1)
    :bind
    ("<f5>" . 'projectile-compile-project)
    )
#+END_SRC
** Rainbow color
   Colorize
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode)
    )
#+END_SRC
** Rainbow delimeters
   Colored delimeters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    )
#+END_SRC
** Sudo Edit
   Edit files as root
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit)
    )
#+END_SRC
** Spaces
   Use spaces as tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
* Completion
** Auto Complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
      :ensure t
      :config
      (ac-config-default)
      )
#+END_SRC
** Electric Pairs
   Auto close brackets
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
* Programming
** Company
   [[https://company-mode.github.io/][Completion]]
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    )
#+END_SRC
** Flycheck
   [[https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake][Syntax checking]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t)
    )
#+END_SRC
** Golang
   [[https://golang.org/][Go]] language support
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    )
#+END_SRC
** Haskell
   [[https://www.haskell.org/][Haskell]] language support
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    )
#+END_SRC
** Markdown
   [[https://daringfireball.net/projects/markdown][Markdown]] language support
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode
    (
     ("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode)
     )
    :init
    (setq markdown-command "multimarkdown")
    )
#+END_SRC
** Match words
   Highlight the same words
#+BEGIN_SRC emacs-lisp
  (use-package idle-highlight-mode
    :ensure t
    :config
    (add-hook 'prog-mode-hook
              (lambda ()
                (idle-highlight-mode t)
                )
              )
    )
#+END_SRC
** Python
   [[https://www.python.org/][Python]] IDE
   Remember to run elpy-config to install some necessary packages
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    (setq elpy-rpc-virtualenv-path "~/.local/")
    (when (load "flycheck" t t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode)
      )
    (add-hook 'python-mode-hook
              (lambda ()
                (auto-complete-mode -1)
                )
              )
    )
#+END_SRC
** Racket
   [[https://racket-lang.org/][Racket]] language support
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :ensure t
    :config
    (add-hook 'racket-mode-hook 'company-mode)
    (add-hook 'racket-mode-hook 'racket-xp-mode)
    )
#+END_SRC
** Rust
   [[https://www.rust-lang.org/][Rust]] language support
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    ;; Rust style guide recommends spaces for indentation
    (add-hook 'rust-mode-hook
              (lambda ()
                (setq indent-tabs-mode nil)
                )
              )
    )
#+END_SRC
** Slime
   [[https://common-lisp.net/project/slime/][Lisp]] language support
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy))
    )
#+END_SRC
** Tabs
   Tab width settings
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq js-indent-level 4)
  (setq c-basic-offset 4)
  (setq css-indent-offset 4)
  (setq sh-basic-offset 4)
#+END_SRC
** Web Formatting
   Enable Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    (
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.blade\\.php\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.ejs\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.html?\\'" . web-mode)
     ("\\.jsp\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.php\\'" . web-mode)
     ("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode)
     )
    :init
    (setq web-mode-enable-auto-closing t
          web-mode-enable-auto-pairing t
          web-mode-enable-comment-keywords t
          web-mode-enable-current-element-highlight t
          web-mode-code-indent-offset 4
          web-mode-css-indent-offset 4
          web-mode-markup-indent-offset 4
          web-mode-block-padding 4
          web-mode-script-padding 4
          web-mode-style-padding 4
          )
    )
#+END_SRC
** Yaml
   [[https://yaml.org][Yaml]] language support
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-hook 'yaml-mode-hook
              (lambda ()
                (define-key yaml-mode-map "\C-m" 'newline-and-indent)
                )
              )
    )
#+END_SRC
** Yasnippet
   [[https://github.com/AndreaCrotti/yasnippet-snippets][Code snippets]]
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook
    ((
      c++-mode
      c-mode
      go-mode
      haskell-mode
      html-mode
      js-mode
      lisp-mode
      python-mode
      rust-mode
      shell-mode
      ) . yas-minor-mode
        )
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    )
#+END_SRC
* Org
** Deft
   My deft setup
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :bind
    ("<f8>" . deft)
    :commands
    (deft)
    :config
    (setq deft-directory "~/Documents/Diary"
          deft-extensions '("md" "org" "rst" "tex" "text" "txt")
          )
    )
#+END_SRC
   Create Diary if it does not exist
#+BEGIN_SRC emacs-lisp
  (if (not (file-exists-p "~/Documents/Diary"))
      (with-temp-buffer
        (make-directory "~/Documents/Diary")
        )
    )
#+END_SRC
** Org Agenda
   My Org agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
  (setq org-agenda-files (list
                          "~/Documents/todo.org"
                          )
        )
#+END_SRC
   Create todo.org if it does not exist
#+BEGIN_SRC emacs-lisp
  (if (not
       (file-exists-p "~/Documents/todo.org"))
      (with-temp-buffer
        (write-file "~/Documents/todo.org")
        )
    )
#+END_SRC
** Org Bullets
   Make Org look prettier
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (setq org-bullets-bullet-list
          '("⦿"))
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode)
                )
              )
    )
#+END_SRC
** Same edit window
   With =C-c '= replace the original .org file with editor
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Template
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c t") 'org-insert-structure-template)
#+END_SRC
** Wrap words
#+BEGIN_SRC emacs-lisp
  (setq org-startup-truncated nil)
#+END_SRC
* Misc Plugins
** Uppercase
#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
#+END_SRC
** Dash
   Modern list api for Emacs
   Should be required by other packages, but I make sure it is installed.
#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t
    )
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq inhibit-startup-screen t
          inhibit-startup-message t)
    (dashboard-setup-startup-hook)
    ;; This is a parody of Warhammer Noise Marine quote in case you wondered :)
    (setq dashboard-banner-logo-title "This lack of Emacs offends Stallman!"
          dashboard-banner-logo-title-face t
          dashboard-startup-banner "~/.emacs.d/img/Noise_Marine_Transparent.png"
          dashboard-items '(
                            (recents  . 7)
                            (projects . 5)
                            )
          show-week-agenda-p t
          dashboard-center-content t)
    (add-to-list 'dashboard-items '(agenda) t)
    )
#+END_SRC
** Dired Sidebar
   Sidebar for Emacs leveraging Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :ensure t
    :commands
    (dired-sidebar-toggle-sidebar)
    :bind
    (("C-x C-n" . dired-sidebar-toggle-sidebar))
    )
#+END_SRC
** Reveal.js
   Export ORG mode contents to Reveal.js HTML presentations
#+BEGIN_SRC emacs-lisp
  ;; reveal dependency
  (use-package htmlize
    :ensure t)
  (use-package ox-reveal
    :ensure t
    :config
    ;; maybe add auto-installer in the future
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    )
#+END_SRC
** Vterm Terminal
   [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]] uses [[https://github.com/neovim/libvterm][libvterm]]
   Installation of libvterm will be performed automatically if the prerequisites are met:
     - Emacs with module support
     - cmake
     - make
     - libtool
     - git
   Load vterm only in GUI
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
      (when window-system
        (use-package vterm
          :ensure t
          :config
          (setq vterm-shell '"$SHELL -l")
          :bind
          ("<f2>" . 'vterm)
          )
        )
    )
#+END_SRC
