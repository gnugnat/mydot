#+TITLE: My Primary Emacs Config in Org
#+AUTHOR: XGQT
#+LANGUAGE: en
#+STARTUP: content inlineimages
#+OPTIONS: toc:nil num:nil
#+REVEAL_THEME: black
[[./assets/icons/steal_your_emacs_250x250.png]]
* Environment
** Auto Update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq
     auto-package-update-delete-old-verions t
     auto-package-update-interval 5
     )
    (auto-package-update-maybe)
    )
#+END_SRC
** Edit/Reload configuration
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    "Edit config.org."
    (interactive)
    (find-file "~/.emacs.d/config.org" )
    )
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    "Reload config.org at runtime."
    (interactive)
    (when (file-readable-p "~/.emacs.d/config.org")
      (org-babel-load-file (expand-file-name "~/.emacs.d/config.org" ))
      )
    )
  (global-set-key (kbd "C-c r") 'config-reload)

  (defun gui-reload ()
    "Reload gui-config.org at runtime."
    (interactive)
    (when (file-readable-p "~/.emacs.d/gui-config.org")
      (org-babel-load-file (expand-file-name "~/.emacs.d/gui-config.org"))
      )
    )
  (global-set-key (kbd "C-c g") 'gui-reload)

  ;; Try to load the GUI config
  (when window-system
    (gui-reload)
    )
#+END_SRC
** Keybinding Help
   Key binding hints
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    )
#+END_SRC
** Minor
   Some small tweaks that don't require packages
#+BEGIN_SRC emacs-lisp
  ;; no toolbar:
  (tool-bar-mode -1)
  ;; no menubar:
  ;;;; can still be accessed with F10
  (menu-bar-mode -1)
  ;; no scrollbar (only if that function is available):
  (if (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1)
    )
  ;; line numbers:
  (global-display-line-numbers-mode 1)
  ;; scrolling:
  (setq scroll-conservatively 100)
  ;; no "bell" (audible notification):
  (setq ring-bell-function 'ignore)
  ;; highlight:
  (global-hl-line-mode t)
  ;; use mouse in xterm
  (xterm-mouse-mode)
  ;; auto reloading (reverting) buffers
  (global-auto-revert-mode 1)
  ;; disable lock files:
  (setq create-lockfiles nil)
  ;; disable autosave:
  (setq auto-save-default nil)
  ;; disable backups:
  (setq make-backup-files nil)
  ;; backups directory:
  ;;(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
  ;; Pass "y or n" instead of "yes or no"
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Disable clipboard
  (setq x-select-enable-clipboard-manager nil)
  ;; Highlight parens
  (show-paren-mode t)
#+END_SRC
** No suspend key
   Disable suspending Emacs with =C-z= and bind it to undo
   and rebind shourtcuts with =C-z= to:
   - =C-z= - undo
   - =C-x C-z= - revert buffer
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-x C-z") 'revert-buffer)
#+END_SRC
** Zoom with Scroll
#+BEGIN_SRC emacs-lisp
  ;; Control & Scroll Up - Increase
  (global-set-key [C-mouse-4] 'text-scale-increase)
  ;; Control & Scroll Down - Decrease
  (global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC
* Buffers & Windows
** Follow Splits
   Better window splitting
#+BEGIN_SRC emacs-lisp
  ;; horizontal
  (defun split-and-follow-horizontally ()
    "Split and follow horizontally."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  ;; vertical
  (defun split-and-follow-vertically ()
    "Split and follow vertically."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Ibuffer
   Better switching
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Ibuffer Expert
   Kill buffers (while in menu for switching buffers; pass d on a buffer, x confirmes) without confirmation (y or n)
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
** IDO mode
   Buffer stuff
#+BEGIN_SRC emacs-lisp
  (setq
   ido-create-new-buffer 'always
   ido-enable-flex-matching nil
   ido-everywhere t
   )
  (ido-mode 1)
#+END_SRC
** IDO switch buffers
   Better buffer switching
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
** IDO vertically
   Better positioning
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    )
#+END_SRC
** Kill and remove split
   Kill buffer and delete its window
#+BEGIN_SRC emacs-lisp
  (defun kill-and-remove-split ()
    "Kill and remove split."
    (interactive)
    (kill-buffer)
    (delete-window)
    (balance-windows)
    (other-window 1)
    )
  (global-set-key (kbd "C-x x") 'kill-and-remove-split)
#+END_SRC
** Smex
   Run known programs faster
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex)
    )
#+END_SRC
** Switch window
   Faster window switching, when you press =C-x o= you choose a window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq
     switch-window-increase 4
     switch-window-input-style 'minibuffer
     switch-window-shortcut-style 'qwerty
     switch-window-threshold 2
     )
    (setq
     switch-window-qwerty-shortcuts
     '( "a" "s" "d" "f" "g" "h" "j" "k" "l")
     )
    :bind
    ([remap other-window] . switch-window)
    )
#+END_SRC
* Look
** Spaceline
   Mode line ([[https://www.spacemacs.org/doc/DOCUMENTATION#text-powerline-separators][separators]])
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator 'wave)
    (spaceline-spacemacs-theme)
    )
#+END_SRC
** Theme
   Install spacemacs-theme if not installed
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'spacemacs-theme)
    (package-refresh-contents)
    (package-install 'spacemacs-theme)
    )
  (load-theme 'spacemacs-dark t)
#+END_SRC
* File Editing
** Avy
   Easier search inside files - after pressung binded keys, pass a letter, then pass symbols for the highlighted letter to which you want to go to
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char)
    )
#+END_SRC
** Beacon
   Line highlight when switching
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    )
#+END_SRC
** Encoding
   Set encoding to UTF-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** Insert date
   In non-Org documents:
     - =C-c d= :         13.04.2004
     - =C-u C-c d= :     2004-04-13
     - =C-u C-u C-c d= : Dienstag, 13. April 2004
#+BEGIN_SRC emacs-lisp
  (defun insert-date (prefix)
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%d.%m.%Y")
                   ((equal prefix '(4)) "%Y-%m-%d")
                   ((equal prefix '(16)) "%A, %d. %B %Y")
                   )
                  )
          (system-time-locale "pl_PL")
          )
      (insert (format-time-string format))
      )
    )
  (global-set-key (kbd "C-c d") 'insert-date)
#+END_SRC
** Magit
   Git management
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq
     git-commit-summary-max-length 80
     magit-push-always-verify nil
     )
    :bind
    (
     ("C-c s" . magit-status)
     ("C-c b" . magit-blame)
     )
    )
#+END_SRC
** Projectile
   Project management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1)
    :bind
    ("<f5>" . 'projectile-compile-project)
    )
#+END_SRC
** Rainbow color
   Colorize hexadecimal values
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook
    ((prog-mode . rainbow-mode))
    )
#+END_SRC
** Rainbow delimeters
   Colored delimeters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((prog-mode . rainbow-delimiters-mode))
    )
#+END_SRC
** Sudo Edit
   Edit files as root
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit)
    )
#+END_SRC
** Spaces
   Use spaces as tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
* Programming
** Company
   [[https://company-mode.github.io/][Completion]]
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq
     company-idle-delay 0
     company-minimum-prefix-length 2
     )
    )
  (use-package company-quickhelp
    :ensure t
    :hook
    (company-mode . company-quickhelp-mode)
    )
#+END_SRC
** C
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'company-mode)
#+END_SRC
** C++
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'company-mode)
#+END_SRC
** Electric Pairs
   Auto close brackets
#+BEGIN_SRC emacs-lisp
  (setq
   electric-pair-pairs
   '(
     (?\{ . ?\})
     (?\( . ?\))
     (?\[ . ?\])
     (?\" . ?\")
     )
   )
  (electric-pair-mode t)
#+END_SRC
** Elisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
#+END_SRC
** Elixir
   [[https://elixir-lang.org/][Elixir]] language support
#+BEGIN_SRC emacs-lisp
  (use-package alchemist
    :ensure t
    :hook
    (
     (elixir-mode . alchemist-mode)
     (alchemist-mode . company-mode)
     (alchemist-mode . flycheck-mode)
     )
    )
#+END_SRC
** Erlang
   [[https://www.erlang.org/][Erlang]] language support
#+BEGIN_SRC emacs-lisp
  (add-hook 'erlang-mode-hook 'company-mode)
  ;; Prevent annoying hang-on-compile
  ;; From https://www.lambdacat.com/post-modern-emacs-setup-for-erlang/
  (defvar inferior-erlang-prompt-timeout t)
#+END_SRC
** Flycheck
   [[https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake][Syntax checking]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t)
    )
#+END_SRC
** Go
   [[https://golang.org/][Go]] language support
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :hook
    (
     (go-mode . company-mode)
     )
    )
#+END_SRC
** Haskell
   [[https://www.haskell.org/][Haskell]] language support
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :hook
    (
     (haskell-mode . company-mode)
     (haskell-mode . interactive-haskell-mode)
     )
    )
#+END_SRC
** JavaScript
   [[https://www.javascript.com/][JavaScript]] language support
#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook 'company-mode)
#+END_SRC
** Lisp
   [[https://common-lisp.net/project/slime/][Lisp]] language support
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq
     inferior-lisp-program "/usr/bin/sbcl"
     slime-contribs '(slime-fancy)
     )
    )
#+END_SRC
** Markdown
   [[https://daringfireball.net/projects/markdown][Markdown]] language support
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode
    (
     ("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode)
     )
    :init
    (setq markdown-command "multimarkdown")
    )
#+END_SRC
** Match words
   Highlight the same words
#+BEGIN_SRC emacs-lisp
  (use-package idle-highlight-mode
    :ensure t
    :config
    (add-hook
     'prog-mode-hook
     (lambda ()
       (idle-highlight-mode t)
       )
     )
    )
#+END_SRC
** Perl
#+BEGIN_SRC emacs-lisp
  (defalias 'perl-mode 'cperl-mode)
  (add-hook 'perl-mode-hook 'company-mode)
  (add-hook 'cperl-mode-hook 'company-mode)
#+END_SRC
** Python
   [[https://www.python.org/][Python]] IDE
   Remember to run elpy-config to install some necessary packages
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    :config
    (setq elpy-rpc-virtualenv-path "~/.local/")
    (when (load "flycheck" t t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode)
      )
    )
#+END_SRC
** R
   [[https://www.r-project.org/][R]] language support
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :mode
    (("\\.R\\'" . ess-r-mode))
    :hook
    ((ess-mode . company-mode))
    )
#+END_SRC
** Racket
   [[https://racket-lang.org/][Racket]] language support
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :ensure t
    :mode
    (
     ("\\.rkt\\'" . racket-mode)
     )
    :hook
    (
     (racket-mode . company-mode)
     (racket-mode . racket-xp-mode)
     )
    )
#+END_SRC
** Rust
   [[https://www.rust-lang.org/][Rust]] language support
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :hook
    ((rust-mode . company-mode))
    :config
    ;; Rust style guide recommends spaces for indentation
    (add-hook
     'rust-mode-hook
     (lambda ()
       (setq indent-tabs-mode nil)
       )
     )
    )
#+END_SRC
** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :init
    (setq
     geiser-active-implementations
     '(
       guile
       )
     )
    )
#+END_SRC
** Shell
#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook 'company-mode)
#+END_SRC
** Sr-Speedbar
   [[https://www.emacswiki.org/emacs/SpeedBar][Speedbar]] [[https://github.com/emacsorphanage/sr-speedbar][in the same frame]]
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t
    :bind
    (("s-s" . sr-speedbar-toggle))
    )
#+END_SRC
** Tabs
   Tab width settings
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq
   js-indent-level 4
   c-basic-offset 4
   css-indent-offset 4
   sh-basic-offset 4
   )
#+END_SRC
** Web
   Enable Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    (
     ("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.blade\\.php\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.ejs\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.html?\\'" . web-mode)
     ("\\.jsp\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.php\\'" . web-mode)
     ("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.xml\\'" . web-mode)
     )
    :hook
    ((web-mode . company-mode))
    :config
    (setq
     web-mode-enable-auto-closing t
     web-mode-enable-auto-pairing t
     web-mode-enable-comment-keywords t
     web-mode-enable-current-element-highlight t
     web-mode-code-indent-offset 4
     web-mode-css-indent-offset 4
     web-mode-markup-indent-offset 4
     web-mode-block-padding 4
     web-mode-script-padding 4
     web-mode-style-padding 4
     )
    )
#+END_SRC
** Yaml
   [[https://yaml.org][Yaml]] language support
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-hook
     'yaml-mode-hook
     (lambda ()
       (define-key yaml-mode-map "\C-m" 'newline-and-indent)
       )
     )
    )
#+END_SRC
** Yasnippet
   [[https://github.com/AndreaCrotti/yasnippet-snippets][Code snippets]]
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook
    (
     (
      c++-mode
      c-mode
      go-mode
      haskell-mode
      html-mode
      js-mode
      lisp-mode
      python-mode
      rust-mode
      shell-mode
      ) . yas-minor-mode
     )
    :config
    (use-package yasnippet-snippets
      :ensure t
      )
    (yas-reload-all)
    )
#+END_SRC
* Org
** Agenda
   My Org agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
  (setq
   org-agenda-files
   (list
    "~/Documents/todo.org"
    )
   )
#+END_SRC
   Create todo.org if it does not exist
#+BEGIN_SRC emacs-lisp
  (if (not
       (file-exists-p "~/Documents/todo.org"))
      (with-temp-buffer
        (write-file "~/Documents/todo.org")
        )
    )
#+END_SRC
** Bullets
   Make Org look prettier
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (setq org-bullets-bullet-list
          '("⦿"))
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode)
                )
              )
    )
#+END_SRC
** Deft
   My deft setup
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :bind
    ("<f8>" . deft)
    :commands
    (deft)
    :config
    (setq
     deft-directory "~/Documents/Diary"
     deft-extensions '("md" "org" "rst" "tex" "text" "txt")
     )
    )
#+END_SRC
   Create Diary if it does not exist
#+BEGIN_SRC emacs-lisp
  (if (not (file-exists-p "~/Documents/Diary"))
      (with-temp-buffer
        (make-directory "~/Documents/Diary")
        )
    )
#+END_SRC
** Edit window
   With =C-c '= replace the original .org file with editor
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Template
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i") 'org-insert-structure-template)
#+END_SRC
** Word wrap
#+BEGIN_SRC emacs-lisp
  (setq org-startup-truncated nil)
#+END_SRC
* Misc Plugins
** Dash
   Modern list api for Emacs
   Should be required by other packages, but I make sure it is installed.
#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t
    )
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq
     dashboard-banner-logo-title-face t
     dashboard-center-content t
     dashboard-startup-banner "~/.emacs.d/assets/icons/steal_your_emacs_250x250.png"
     inhibit-startup-message t
     inhibit-startup-screen t
     show-week-agenda-p t
     )
    (setq
     dashboard-items
     '(
       (recents  . 5)
       (projects . 5)
       )
     )
    (add-to-list 'dashboard-items '(agenda) t)
    )
#+END_SRC
** Dired Sidebar
   Sidebar for Emacs leveraging Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :ensure t
    :commands
    (dired-sidebar-toggle-sidebar)
    :bind
    (("C-x C-n" . dired-sidebar-toggle-sidebar))
    )
#+END_SRC
** Uppercase
   =C-x C-u= to convert a region to uppercase
#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
#+END_SRC
** Reveal.js
   Export ORG mode contents to Reveal.js HTML presentations
#+BEGIN_SRC emacs-lisp
  ;; reveal dependency
  (use-package htmlize
    :ensure t
    )
  (use-package ox-reveal
    :ensure t
    :config
    ;; maybe add auto-installer in the future
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    )
#+END_SRC
