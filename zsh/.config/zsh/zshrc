#!/usr/bin/env zsh


#          _
#  _______| |__  _ __ ___
# |_  / __| '_ \| '__/ __|
#  / /\__ \ | | | | | (__
# /___|___/_| |_|_|  \___|


# >>> General setup

# Source common shell functions

shell_functions="${HOME}/.config/sh/functions"
[ -f "${shell_functions}" ] && source "${shell_functions}"


# >>> Path

setup_path


# >>> Aliases

# Source shell-agnostic aliases
source_file "${HOME}/.config/sh/aliases"


# >>> History

# Necessary to save history
HISTFILE=${ZCACHEDIR}/zhistory
HISTSIZE=50000
SAVEHIST=${HISTSIZE}

# Ignore duplicates
setopt hist_ignore_all_dups

# Ignore space
setopt hist_ignore_space

# Save immediatelly, share history between terminals
setopt share_history


# >>> Completion

# Extendedglob
setopt extendedglob

# Load compinit
autoload -U compinit
compinit -d ${ZCACHEDIR}/zcompdump

# Advanced tab-completion
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
zstyle ':completion:*' menu select

# Correction
setopt correctall


# >>> Key bindings

# Kill & Yank
# for this set Emacs key bindings
bindkey -e

# Ctrl-left and Ctrl-right
bindkey "^[[1;5D" backward-word
bindkey "^[[1;5C" forward-word

# Del, Home and End
bindkey "^[[3~" delete-char
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# Reverse search
bindkey "^R" history-incremental-search-backward

# Remove C-d binding (list-choices/delete-char-or-list)
bindkey -r "^D"


# >>> Theme

# Prompt init
autoload -U promptinit
promptinit

# Source appropriate theme
if [ -z ${DISPLAY} ]; then
    # theme in tty
    source_file "${ZDOTDIR}/tty.zsh-theme"
else
    # theme in emulators
    source_file "${ZDOTDIR}/emu.zsh-theme"
fi


# >>> Plugins

# Syntax coloring
source_file "${ZDOTDIR}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# Autosuggestions
source_file "${ZDOTDIR}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"

# Autosuggestions highlight style
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=6"

# Check Git branch
git_check() {
    branch=$(git branch 2>/dev/null | sed -n -e 's/^\* \(.*\)/\1/p')
    [ ! -z "${branch}" ] && echo "${pre_git_check}${branch}${post_git_check}"
}


# >>> GPG

# Export some vars
export GPG_TTY=$(tty)
export PINENTRY_USER_DATA="USE_CURSES=1"

# Check if GPG agent exists
if command -v gpg-agent >/dev/null 2>&1
then
    # Start GPG agent if it is not running
    pgrep -u "${USER}" gpg-agent >/dev/null 2>&1 || gpg-agent --daemon 2>/dev/null
fi


# >>> SSH

# Check if SSH agent nad XDG runtime directory exist
if command -v ssh-agent >/dev/null 2>&1 && [ -d "${XDG_RUNTIME_DIR}" ]
then
    # Start SSH agent if it is not running
    pgrep -u "${USER}" ssh-agent >/dev/null 2>&1 || ssh-agent > "${XDG_RUNTIME_DIR}/ssh-agent.env"
    [ -f "${SSH_AUTH_SOCK}" ] || eval "$(< "${XDG_RUNTIME_DIR}/ssh-agent.env")" >/dev/null 2>&1
fi


# >>> Miscellaneous

# Prompt Substring
# used by git_check
setopt PROMPT_SUBST

# Color
use_color=true

# Directory name to change dir
setopt autocd

# Do not beep
unsetopt beep

# Command Editor
autoload -U edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

case ${TERM} in
    xterm* )
        # Change the window title of X terminals
        precmd() {
            print -Pn "\e]0;${USER}@${HOST}:${PWD/#$HOME/\~}\a"
        }
        ;;
    dumb )
        # For some SSH sessions (Emacs)
        unsetopt zle
        unsetopt prompt_cr
        unsetopt prompt_subst
        unfunction precmd
        unfunction preexec
        PS1='$ '
        ;;
esac

# ls after changing directory
chpwd() ls
