#!/bin/sh


# This file is part of mydot.

# mydot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.

# mydot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with mydot.  If not, see <https://www.gnu.org/licenses/>.

# Copyright (c) 2020-2021, Maciej Barć <xgqt@riseup.net>
# Licensed under the GNU GPL v3 License

#      _
#  ___| |_ _____      __
# / __| __/ _ \ \ /\ / /
# \__ \ || (_) \ V  V /
# |___/\__\___/ \_/\_/
#     __ _ _
#    / _(_) | ___  ___
#   | |_| | |/ _ \/ __|
#  _|  _| | |  __/\__ \
# (_)_| |_|_|\___||___/

# shellcheck disable=2039


trap 'exit 128' INT

# Add user's Python scripts to PATH
PATH="${PATH}:${HOME}/.local/bin"
export PATH

remove=0


msg() {
    echo "$(tput bold)${*}$(tput sgr0)"
}

usage() {
    cat <<EOF
Usage: stowdot [OPTION]
stowdot - stow dotfiles

Options:
    -h  show avalible options
    -i  install
    -r  remove

Copyright (c) 2020-2021, Maciej Barć <xgqt@riseup.net>
Licensed under the GNU GPL v3 License
EOF
}

err_msg() {
    msg "ERROR: ${*}"
    exit 1
}

exists() {
    if command -v "${1}" >/dev/null 2>&1
    then
        return 0
    else
        return 1
    fi
}


# Commandline options

case "${1}"
in
    -h | -help | --help | help )
        usage
        exit 0
        ;;
    -i | --install | -install | install | "" )
        remove=0
        msg "Choosing the installation option"
        ;;
    -r | --remove | -remove | remove )
        remove=1
        msg "Choosing the removal option"
        ;;
    * )
        usage
        err_msg "Wrong argument: ${1}"
        ;;
esac


# Needed checks

# check for stow
if exists stow
then
    stow_impl=stow
elif exists xstow
then
    stow_impl=xstow
elif exists pystow
then
    stow_impl=pystow
else
    echo "There is none of supported 'stow' implementations on the sytem!"
    echo "If you don't want to use 'ln' manually please install any of:"
    echo "- stow"
    echo "- xstow"
    echo "- pystow"
    err_msg "No stow program! Exiting"
fi

msg "Stow implementation: ${stow_impl}"

# Go to mydot source
mydot_source="$(dirname "${0}")/src"
cd "${mydot_source}" || err_msg "Can't cd into ${mydot_source}"

# check needed directories
req_dirs="
    ${HOME}/.config/emacs
    ${HOME}/.config/mpd/playlists
    ${HOME}/.local/share/racket/.racket
    ${HOME}/.vnc
"
for dir in ${req_dirs}
do
    if [ -e "${dir}" ]
    then
        echo "${dir} exists, good"
    else
        mkdir -p "${dir}"
        echo "${dir} created"
    fi
done

# Use ~/.emacs.d if version of Emacs < 27.1
if exists emacs
then
    if emacs -Q --batch --eval='(if (version< emacs-version "27.1") (error ""))'
    then
        [ -e "${HOME}/.emacs.d" ] && mv "${HOME}/.emacs.d" "${HOME}/.emacs.d.bak"
    else
        ln -s "${HOME}/.config/emacs" "${HOME}/.emacs.d"
    fi
fi


# Perform desired Stow action

# then we iterate through everything there
for target in *
do
    # check if it's a directory
    if [ -d "${target}" ]
    then
        # finally do some work
        if [ ${remove} -gt 0 ]
        then
            msg "Removing $(tput bold)$target$(tput sgr0)"
            ${stow_impl} -v -t "${HOME}" -D "${target}"
        else
            msg "Installing $(tput bold)$target$(tput sgr0)"
            ${stow_impl} -v -t "${HOME}" "${target}"
        fi
    fi
done
