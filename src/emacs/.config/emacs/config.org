#+TITLE: My Primary Emacs Config in Org

#+AUTHOR: Maciej Barć
#+LANGUAGE: en

#+STARTUP: content inlineimages
#+OPTIONS: toc:nil num:nil
#+REVEAL_THEME: black


# This file is part of mydot.

# mydot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.

# mydot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with mydot.  If not, see <https://www.gnu.org/licenses/>.

# Copyright (c) 2020-2021, Maciej Barć <xgqt@riseup.net>
# Licensed under the GNU GPL v3 License


[[../../../../images/icons/steal_your_emacs.png]]


* History

** Origins

   The original version of this configuration was based on a Emacs series
   by "Uncle Dave" (no relation ;P).

   The playlist on =YouTube= can be found [[https://www.youtube.com/playlist?list=PLX2044Ew-UVVv31a0-Qn3dA6Sd_-NyA1n][here]].

   The =repository= for Dave's configuration can be found [[https://github.com/daedreth/UncleDavesEmacs][here]].

** Screenshots

   [[../../../../images/screenshots/emacs_2021-04-08.jpg]]


* Startup

** Defer

   Defer package loading to speed up the startup time.

   #+BEGIN_SRC emacs-lisp
     (use-package autorevert :defer 3)
     (use-package paren      :defer 3)
     (use-package projectile :defer 3)
     (use-package recentf    :defer 3)
     (use-package saveplace  :defer 3)
     (use-package server     :defer 3)
     (use-package whitespace :defer 3)
   #+END_SRC

** Update

   Periodical package updates.

   + Auto-Package-Update:
     - https://github.com/rranelli/auto-package-update.el
     - https://melpa.org/#/auto-package-update

   #+BEGIN_SRC emacs-lisp
     (use-package auto-package-update
       :ensure t
       :config
       (setq
        auto-package-update-delete-old-verions t
        auto-package-update-interval 5
        )
       (auto-package-update-maybe)
       )
   #+END_SRC


* Environment

** Prefix Key

   Special prefix for my bindings.

   | Key Combination | Command                             |
   |-----------------+-------------------------------------|
   | C-l c           | config (visit/reload)               |
   | C-l g           | grep                                |
   | C-l m           | magit                               |
   | C-l t           | treemacs                            |
   |-----------------+-------------------------------------|
   | C-l C-l         | config-reload                       |
   | C-l C-v         | config-visit                        |
   | C-l a           | org-agenda                          |
   | C-l d           | dired-sidebar-toggle-sidebar        |
   | C-l n           | ranger                              |
   | C-l r           | toggle-transparency                 |
   |-----------------+-------------------------------------|
   | C-x C-u         | upcase-region                       |
   | C-z             | undo                                |
   | M-s             | avy-goto-char                       |
   | M-x             | smex                                |
   |-----------------+-------------------------------------|
   | f2              | vterm                               |
   | f5              | projectile-compile-project          |
   | f7              | split-and-start-eshell              |
   | f8              | deft                                |
   |-----------------+-------------------------------------|
   | C-c i           | [org] org-insert-structure-template |
   | C-m             | [yaml] newline-and-indent           |

   Update this periodically with output from =C-h b=.
   To view this you can also run =M-x describe-personal-keybindings=.

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-l"))
     (define-prefix-command 'my-keymap)
     (global-set-key (kbd "C-l") my-keymap)
   #+END_SRC

** Edit / Reload

   Edit the configuration.

   #+BEGIN_SRC emacs-lisp
     (defun config-visit ()
       "Edit config.org."
       (interactive)
       (find-file (w-u-e-d "config.org"))
       )
     (global-set-key (kbd "C-l C-v") 'config-visit)
     (global-set-key (kbd "C-l c v") 'config-visit)
   #+END_SRC

   Reload the configuration.

   #+BEGIN_SRC emacs-lisp
     (defun config-load ()
       "Load config.org at runtime."
       (interactive)
       (load-user-or-current "config.org")
       )

     (defun config-reload ()
       "Reload config.org at runtime."
       (interactive)
       (progn
         (if (file-exists-p (w-u-e-d "config.el"))
             (delete-file (w-u-e-d "config.el"))
           )
         (config-load)
         )
       )

     (global-set-key (kbd "C-l C-l") 'config-reload)
     (global-set-key (kbd "C-l c l") 'config-reload)
   #+END_SRC

** Key bindings

   Key binding hints.

   + Which-Key:
     - https://github.com/justbur/emacs-which-key
     - https://melpa.org/#/which-key

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :diminish
       :init
       (which-key-mode)
       )
   #+END_SRC

   Disable suspending Emacs with =C-z= and bind it to undo.

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "C-x C-z"))
     (global-set-key (kbd "C-z") 'undo)
   #+END_SRC

   Zoom with Scroll.

   #+BEGIN_SRC emacs-lisp
     ;; Control & Scroll Up - Increase
     (global-set-key [C-mouse-4] 'text-scale-increase)
     ;; Control & Scroll Down - Decrease
     (global-set-key [C-mouse-5] 'text-scale-decrease)
   #+END_SRC

   Some terminals (or connections, ie. mosh) set <end> as <select>.
   So, if <select> is not bound - bind it to move-end-of-line.

   #+BEGIN_SRC emacs-lisp
     (if (not (global-key-binding (kbd "<select>")))
         (global-set-key (kbd "<select>") 'move-end-of-line)
       )
   #+END_SRC

   For my lovely Polish keyboard:

   #+BEGIN_SRC emacs-lisp
     (define-key key-translation-map (kbd "←") (kbd "M-y"))
   #+END_SRC

** Minor

   Some small tweaks that don't require packages

   #+BEGIN_SRC emacs-lisp
     ;; specal symbols
     (when window-system (global-prettify-symbols-mode t))
     ;; scrolling:
     (setq scroll-conservatively 100)
     ;; no "bell" (audible notification):
     (setq ring-bell-function 'ignore)
     ;; highlight:
     (global-hl-line-mode t)
     ;; use mouse in xterm
     (xterm-mouse-mode)
     ;; auto reloading (reverting) buffers
     (global-auto-revert-mode 1)
     ;; disable lock files:
     (setq create-lockfiles nil)
     ;; disable autosave:
     (setq auto-save-default nil)
     ;; disable backups:
     (setq make-backup-files nil)
     ;; backups directory:
     ;;(setq backup-directory-alist '(("" . (w-u-e-d "backup"))))
     ;; Pass "y or n" instead of "yes or no"
     (defalias 'yes-or-no-p 'y-or-n-p)
     ;; Disable clipboard
     (setq x-select-enable-clipboard-manager nil)
     ;; Highlight parens
     (show-paren-mode t)
     ;; size in GUI
     (when window-system (set-frame-size (selected-frame) 88 36))
   #+END_SRC


* Buffers & Windows

** Follow Splits

   Better window splitting.

   #+BEGIN_SRC emacs-lisp
     ;; horizontal
     (defun split-and-follow-horizontally ()
       "Split and follow horizontally."
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1)
       )
     (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
     ;; vertical
     (defun split-and-follow-vertically ()
       "Split and follow vertically."
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1)
       )
     (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
   #+END_SRC

   After splitting a frame automatically, switch to the new window
   (unless we were in the minibuffer).

   #+BEGIN_SRC emacs-lisp
     (setq split-window-preferred-function 'my-split-window-function)

     (defun my-split-window-function (&optional window)
       (let
           ((new-window (split-window-sensibly window)))
         (if (not (active-minibuffer-window))
             (select-window new-window)
           )
         )
       )
   #+END_SRC

** Ibuffer

   Better switching

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC

   Kill buffers (while in menu for switching buffers; pass d on a buffer, x confirmes) without confirmation (y or n)

   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-expert t)
   #+END_SRC

** IDO

   [[https://www.emacswiki.org/emacs/InteractivelyDoThings][IDO]] - interactive buffer stuff.

   #+BEGIN_SRC emacs-lisp
     (use-package ido
       :bind
       (("C-x b" . ido-switch-buffer))
       :diminish ido-mode
       :init
       (progn
         (setq
          ido-create-new-buffer 'always
          ido-enable-flex-matching nil
          ido-use-filename-at-point nil
          ido-use-virtual-buffers nil
          ido-everywhere t
          )
         (ido-mode t)
         )
       )
   #+END_SRC

   Better positioning.

   + Ido-Vertical-Mode:
     - https://github.com/creichert/ido-vertical-mode.el
     - https://melpa.org/#/ido-vertical-mode

   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (progn
         (setq ido-vertical-define-keys 'C-n-and-C-p-only)
         (ido-vertical-mode 1)
         )
       )
   #+END_SRC

** Ivy

   This configuration uses ivy in a minimal way.

   + Ivy:
     - https://github.com/abo-abo/swiper
     - https://melpa.org/#/ivy

   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :defer 3
       :diminish
       :config
       (progn
         (ivy-mode)
         (setq
          enable-recursive-minibuffers t
          ivy-use-virtual-buffers t
          )
         )
       )
   #+END_SRC

** Kill and remove split

   Kill buffer and delete its window

   #+BEGIN_SRC emacs-lisp
     (defun kill-and-remove-split ()
       "Kill and remove split."
       (interactive)
       (kill-buffer)
       (delete-window)
       (balance-windows)
       (other-window 1)
       )
     (global-set-key (kbd "C-x x") 'kill-and-remove-split)
   #+END_SRC

** Smex

   Run known programs faster

   + Smex:
     - https://github.com/nonsequitur/smex
     - https://melpa.org/#/smex

   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :bind
       ("M-x" . smex)
       :init
       (smex-initialize)
       )
   #+END_SRC

** Switch window

   Faster window switching, when you press =C-x o= you choose a window

   + Switch-Window:
     - https://github.com/dimitri/switch-window
     - https://melpa.org/#/switch-window

   #+BEGIN_SRC emacs-lisp
     (use-package switch-window
       :ensure t
       :bind
       ([remap other-window] . switch-window)
       :config
       (setq
        switch-window-increase 4
        switch-window-input-style 'minibuffer
        switch-window-qwerty-shortcuts '( "a" "s" "d" "f" "g" "h" "j" "k" "l")
        switch-window-shortcut-style 'qwerty
        switch-window-threshold 2
        )
       )
   #+END_SRC


* Appearance

** Bars

   Disable tool, menu and scroll bars.
   The menu bar can still be accessed with =F10=.

   #+BEGIN_SRC emacs-lisp
     (use-package tool-bar
       :if (fboundp 'tool-bar-mode)
       :ensure nil
       :config
       (tool-bar-mode -1)
       )
     (use-package menu-bar
       :if (fboundp 'menu-bar-mode)
       :ensure nil
       :config
       (menu-bar-mode -1)
       )
     (use-package scroll-bar
       :if (fboundp 'scroll-bar-mode)
       :ensure nil
       :config
       (scroll-bar-mode -1)
       )
   #+END_SRC

** Diminish

   Remove modes from the modeline.

   + Diminish:
     - https://github.com/emacsmirror/diminish
     - https://melpa.org/#/diminish

   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       )
   #+END_SRC

   For packages that here is their sole configuration:

   #+BEGIN_SRC emacs-lisp
     (use-package abbrev :diminish)
     (use-package hi-lock :diminish)
     (use-package hideshow :diminish hs-minor-mode)
     (use-package page-break-lines :diminish)
   #+END_SRC

** Font

   Credits: https://www.emacswiki.org/emacs/SetFonts

   #+BEGIN_SRC emacs-lisp
     ;; Fallback to another font if first is unavalible
     (require 'dash)
     (defun font-candidate (&rest fonts)
       "Return the first available font from FONTS."
       (--first
        (find-font (font-spec :name it)) fonts
        )
       )
     (when window-system
       (set-face-attribute
        'default nil
        :weight 'normal
        :width 'normal
        :height 100
        :font
        ;; List of fonts
        (font-candidate
         "JetBrains Mono"
         "Hack"
         "DejaVu Sans Mono"
         "Monospace"
         "Consolas"
         )
        )
       )
   #+END_SRC

** Icons

   Remember to tun =M-x all-the-icons-install-fonts= to install the required fonts.

   + All-The-Icons:
     - https://github.com/domtronn/all-the-icons.el
     - https://melpa.org/#/all-the-icons
   + All-The-Icons-Dired:
     - https://github.com/wyuenho/all-the-icons-dired
     - https://github.com/jtbm37/all-the-icons-dired (legacy)
     - https://melpa.org/#/all-the-icons-dired
   + All-The-Icons-Ibuffer:
     - https://github.com/seagle0128/all-the-icons-ibuffer
     - https://melpa.org/#/all-the-icons-ibuffer
   + Emojify:
     - https://github.com/iqbalansari/emacs-emojify
     - https://melpa.org/#/emojify

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (setq
        inhibit-compacting-font-caches t
        )
       (use-package all-the-icons
         :if window-system
         :ensure t
         )
       (use-package all-the-icons-dired
         :after all-the-icons
         :ensure t
         :hook
         ((dired-mode . all-the-icons-dired-mode))
         :diminish
         :custom-face
         (all-the-icons-dired-dir-face ((t (:foreground "#988262"))))
         :config
         (setq all-the-icons-dired-monochrome nil)
         )
       (use-package all-the-icons-ibuffer
         :after all-the-icons
         :ensure t
         :init
         (all-the-icons-ibuffer-mode 1)
         )
       (use-package emojify
         :ensure t
         :hook
         ((after-init . global-emojify-mode))
         )
       )
   #+END_SRC

** Spaceline

   Mode line ([[https://www.spacemacs.org/doc/DOCUMENTATION#text-powerline-separators][separators]])

   + Spaceline:
     - https://github.com/TheBB/spaceline
     - https://melpa.org/#/spaceline

   #+BEGIN_SRC emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (progn
         (require 'spaceline-config)
         (setq powerline-default-separator 'wave)
         (spaceline-spacemacs-theme)
         )
       )
   #+END_SRC

** Theme

   Install spacemacs-theme if not installed

   + Spacemacs-Theme:
     - https://github.com/nashamri/spacemacs-theme
     - https://melpa.org/#/spacemacs-theme

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'spacemacs-theme)
       (package-refresh-contents)
       (package-install 'spacemacs-theme)
       )
     (load-theme 'spacemacs-dark t)
   #+END_SRC

** Transparency

   #+BEGIN_SRC emacs-lisp
     ;; Set transparency
     (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
     (add-to-list 'default-frame-alist '(alpha . (95 . 80)))

     ;; You can use the following snippet after you've set the alpha as above to assign a toggle to "C-c t"
     (defun toggle-transparency ()
       "Toggle transparency of the Emacs frame."
       (interactive)
       (let
           (
            (alpha (frame-parameter nil 'alpha))
            )
         (set-frame-parameter
          nil 'alpha
          (if (eql
               (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha))
                     )
               100)
              '(95 . 80) '(100 . 100)
              )
          )
         )
       )

     (global-set-key (kbd "C-l r") 'toggle-transparency)
   #+END_SRC


* File Editing

** Avy

   Easier search inside files - after pressung binded keys, pass a letter, then pass symbols for the highlighted letter to which you want to go to

   + Avy:
     - https://github.com/abo-abo/avy
     - https://melpa.org/#/avy

   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
       ("M-s" . avy-goto-char)
       )
   #+END_SRC

** Beacon

   Line highlight when switching

   + Beacon:
     - https://github.com/Malabarba/beacon
     - https://melpa.org/#/beacon

   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :diminish
       :config
       (beacon-mode 1)
       )
   #+END_SRC

** Cleanup

   Just before saving remove whitespaces.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'whitespace-cleanup)
   #+END_SRC

** Column indicator

   Tun on the =display-fill-column-indicator-mode=.
   Doesn't work with Emacs < 27.1.

   #+BEGIN_SRC emacs-lisp
     (use-package display-fill-column-indicator
       :if (>= (string-to-number emacs-version) 27.1)
       :ensure nil
       :defer t
       :hook
       ((prog-mode . display-fill-column-indicator-mode))
       :init
       (setq-default display-fill-column-indicator-column 80)
       )
   #+END_SRC

** EditorConfig

   Support for =.editorconfig=

   + Editorconfig:
     - https://github.com/editorconfig/editorconfig-emacs
     - https://melpa.org/#/editorconfig

   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :diminish
       :init
       (editorconfig-mode 1)
       )
   #+END_SRC

** Encoding

   Set encoding to UTF-8

   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC

** Git

   Git management

   + Magit:
     - https://github.com/magit/magit
     - https://magit.vc/
     - https://melpa.org/#/magit

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind
       (
        :map my-keymap
        ("m b" . magit-blame)
        ("m c" . magit-commit)
        ("m d" . magit-diff)
        ("m m" . magit)
        ("m p" . magit-push)
        ("m r" . magit-reset)
        ("m s" . magit-status)
        )
       :config
       (setq
        git-commit-summary-max-length 80
        magit-push-always-verify nil
        )
       )
   #+END_SRC

   Highlight changed files/lines.

   + Diff-Hl:
     - https://github.com/dgutov/diff-hl
     - https://melpa.org/#/diff-hl

   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :ensure t
       :hook
       ((dired-mode . diff-hl-dired-mode))
       :init
       (global-diff-hl-mode)
       )
   #+END_SRC

** Grep

   Grepping from within Emacs.

   Key bindings are available within =my-keymap=:
   | key        | function  |
   |------------+-----------|
   | g / RETurn | grep      |
   | l          | lgrep     |
   | r          | rgrep     |
   | z          | zgrep     |
   | k          | kill-grep |

   #+begin_src emacs-lisp
     (use-package grep-mode
       :if (executable-find "grep")
       :ensure nil
       :hook
       (
        (grep-mode . idle-highlight-mode)
        (grep-mode . rainbow-mode)
        )
       :bind
       (
        :map my-keymap
        ("g <RET>" . grep)
        ("g g" . grep)
        ("g l" . lgrep)
        ("g r" . rgrep)
        ("g z" . zgrep)
        ("g k" . kill-grep)
        )
       )
   #+end_src

** Hex colors

   Colorize hexadecimal values

   + Rainbow-Mode:
     - https://elpa.gnu.org/packages/rainbow-mode-1.0.5.el
     - https://elpa.gnu.org/packages/rainbow-mode.html

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :defer t
       :hook
       (
        (find-file . rainbow-mode)
        (prog-mode . rainbow-mode)
        )
       :diminish
       )
   #+END_SRC

** Hyperlinks

   Make hyperlinks in current buffer interactive.

   #+BEGIN_SRC emacs-lisp
     (use-package goto-addr
       :ensure nil
       :defer t
       :hook
       (
        (fundamental-mode . goto-address-mode)
        (text-mode . goto-address-mode)
        (org-mode  . goto-address-mode)
        (prog-mode . goto-address-prog-mode)
        )
       )
   #+END_SRC

** Kill Ring

   Kill Ring tweaks.

   + Popup-Kill-Ring:
     - https://github.com/waymondo/popup-kill-ring
     - https://melpa.org/#/popup-kill-ring
     - https://www.emacswiki.org/emacs/popup-kill-ring.el

   #+BEGIN_SRC emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :defer t
       :commands (popup-kill-ring)
       :bind
       (("M-y" . popup-kill-ring))
       )
   #+END_SRC

** Line numbers

   Display line numbers only in files.

   #+BEGIN_SRC emacs-lisp
     (use-package display-line-numbers
       :ensure nil
       :hook
       ((find-file . display-line-numbers-mode))
       )
   #+END_SRC

** Undo tree

   [[https://github.com/apchamberlain/undo-tree.el][Changes to file as a tree]].

   + Undo-Tree:
     - http://www.dr-qubit.org/undo-tree/undo-tree.el
     - https://elpa.gnu.org/packages/undo-tree.html

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :bind
       (("C-x C-z" . undo-tree-visualize))
       :diminish
       :init
       (global-undo-tree-mode)
       )
   #+END_SRC

** Projectile

   Project management

   + Projectile:
     - https://github.com/bbatsov/projectile
     - https://melpa.org/#/projectile

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :defer 3
       :bind
       ("<f5>" . projectile-compile-project)
       :init
       (progn
         (setq projectile-mode-line-prefix "Pro")
         (projectile-mode 1)
         )
       )
   #+END_SRC

** Rainbow delimiters

   Colored delimiters

   + Rainbow-Delimiters:
     - https://github.com/Fanael/rainbow-delimiters
     - https://melpa.org/#/rainbow-delimiters

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook
       (
        (comint-mode . rainbow-delimiters-mode)
        (prog-mode . rainbow-delimiters-mode)
        (shell-mode . rainbow-delimiters-mode)
        )
       )
   #+END_SRC

** Spaces

   Use spaces as tabs

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Spelling

   Spell checking.

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell-mode
       :if (or (executable-find "hunspell") (executable-find "aspell"))
       :ensure nil
       :hook
       (
        (org-mode  . turn-on-flyspell)
        (prog-mode . flyspell-prog-mode)
        (tex-mode  . flyspell-mode)
        )
       :init
       (cond
        ((executable-find "hunspell")
         (setq ispell-program-name "hunspell")
         )
        ((executable-find "aspell")
         (setq ispell-program-name "aspell")
         )
        )
       )
   #+END_SRC

** Swiper

   Search with regex & overview.

   + Swiper:
     - https://github.com/abo-abo/swiper
     - https://melpa.org/#/swiper

   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :defer 3
       :bind
       (("C-s" . swiper))
       )
   #+END_SRC


* Programming

** Eldoc

   Show function/variable docstring in the echo area.

   Keep this on top.

   + Eldoc:
     - http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/emacs-lisp/eldoc.el
     - https://elpa.gnu.org/packages/eldoc.html

   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
       :ensure t
       :defer t
       :hook
       ((prog-mode . eldoc-mode))
       :diminish
       )
   #+END_SRC

** Company

   The company completion framework.

   Keep this here, above, before adding company hooks.
   If pressing return (enter) completes the wrong word and it is annoying,
   you can press space (to avoid the current auto-completed word)
   followed by return (whitespace cleanup is enabled so don't worry
   about leftover spaces).

   + Company:
     - https://company-mode.github.io/
     - https://github.com/company-mode/company-mode
     - https://melpa.org/#/company
   + Company-Quickhelp:
     - https://github.com/company-mode/company-quickhelp
     - https://melpa.org/#/company-quickhelp

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :diminish
       :init
       (global-company-mode t)
       :config
       (setq
        company-idle-delay 0
        company-minimum-prefix-length 2
        )
       )
     (use-package company-quickhelp
       :ensure t
       :hook
       (company-mode . company-quickhelp-mode)
       )
   #+END_SRC

   Company backends:

   + Company-Math:
     - https://github.com/vspinu/company-math
     - https://melpa.org/#/company-math

   #+BEGIN_SRC emacs-lisp
     (use-package company-math
       :ensure t
       :config
       (add-to-list 'company-backends 'company-math-symbols-unicode)
       )
   #+END_SRC

** LSP

   [[https://emacs-lsp.github.io/lsp-mode/][Language Server Protocol]] support for Emacs.

   Keep this second, after company.

   + Lsp-Mode:
     - https://github.com/emacs-lsp/lsp-mode/
     - https://melpa.org/#/lsp-mode
   + Elgot:
     - https://github.com/joaotavora/eglot
     - https://melpa.org/#/eglot

   #+BEGIN_SRC emacs-lisp
     ;; LSP Server
     (use-package lsp-mode
       :ensure t
       :hook
       ((lsp-mode . company-mode))
       )
     ;; Eglot Client
     ;; for packages that do not provide their own client
     (use-package eglot
       :ensure t
       )
   #+END_SRC

** C & C++

   [[https://en.wikipedia.org/wiki/C_(programming_language)][C]] & [[https://isocpp.org][C++]] language support.
   Use Eglot for the C/C+ LSP client.

   #+BEGIN_SRC emacs-lisp
     ;; Utilize clangd from the LLVM project
     ;; https://github.com/llvm/llvm-project/tree/master/clang-tools-extra/clangd
     (when (executable-find "clangd")
       (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
       (add-hook 'c-mode-hook 'eglot-ensure)
       (add-hook 'c++-mode-hook 'eglot-ensure)
       )
   #+END_SRC

** C#

   [[https://docs.microsoft.com/en-us/dotnet/csharp/][C#]] language support.

   + Omnisharp:
     - https://github.com/OmniSharp/omnisharp-emacs
     - https://melpa.org/#/omnisharp
   + Dotnet:
     - https://github.com/julienXX/dotnet.el
     - https://melpa.org/#/dotnet

   #+BEGIN_SRC emacs-lisp
     (when (executable-find "dotnet")
       (use-package omnisharp
         :ensure t
         :hook
         ((csharp-mode . omnisharp-mode))
         :config
         (progn
           (add-to-list 'company-backends 'company-omnisharp)
           (setq
            c-syntactic-indentation t
            truncate-lines t
            )
           )
         )
       (use-package dotnet
         :ensure t
         :requires omnisharp
         :hook
         (
          (csharp-mode . dotnet-mode)
          (fsharp-mode . dotnet-mode)
          )
         )
       )
   #+END_SRC

** Comments

   Highlight special keywords in comments.

   + Hl-Todo:
     - https://github.com/tarsius/hl-todo
     - https://melpa.org/#/hl-todo

   #+BEGIN_SRC emacs-lisp
     (use-package hl-todo
       :ensure t
       :init
       (global-hl-todo-mode)
       :config
       (setq
        hl-todo-keyword-faces
        '(
          ("BROKEN"     . "#FF0000")
          ("BUG"        . "#FF0000")
          ("DEBUG"      . "#A020F0")
          ("FIXME"      . "#FF4500")
          ("GOTCHA"     . "#FF4500")
          ("STUB"       . "#1E90FF")
          ("TODO"       . "#1E90FF")
          ("WORKAROUND" . "#A020F0")
          )
        )
       )
   #+END_SRC

** Docker

   [[https://www.docker.com/][Docker]] support.

   + Docker:
     - https://github.com/Silex/docker.el
     - https://melpa.org/#/docker
   + Dockerfile-Mode:
     - https://github.com/spotify/dockerfile-mode
     - https://melpa.org/#/dockerfile-mode

   #+BEGIN_SRC emacs-lisp
     (use-package docker
       :if (executable-find "docker")
       :ensure t
       :defer t
       :commands (docker)
       )
     (use-package dockerfile-mode
       :ensure t
       :defer t
       :mode
       (
        ("Dockerfile\\'"    . dockerfile-mode)
        ("\\.Dockerfile\\'" . dockerfile-mode)
        )
       )
   #+END_SRC


** Electric Pairs

   Automatically close brackets.

   #+BEGIN_SRC emacs-lisp
     (setq
      electric-pair-pairs
      '(
        (?\{ . ?\})
        (?\( . ?\))
        (?\[ . ?\])
        (?\" . ?\")
        )
      )
     (electric-pair-mode t)
   #+END_SRC

** Elisp

   [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][Emacs Lisp]] interaction configuration.

   #+BEGIN_SRC emacs-lisp
     (use-package inferior-emacs-lisp-mode
       :ensure nil
       :hook
       (
        (ielm-mode . company-mode)
        (ielm-mode . rainbow-delimiters-mode)
        (ielm-mode . eldoc-mode)
        )
       :commands (ielm)
       )
   #+END_SRC

** Elixir

   [[https://elixir-lang.org/][Elixir]] language support.

   + Alchemist:
     - https://github.com/tonini/alchemist.el
     - https://melpa.org/#/alchemist

   #+BEGIN_SRC emacs-lisp
     (use-package alchemist
       :if (executable-find "elixir")
       :ensure t
       :diminish "ExA"
       :hook
       ((elixir-mode . alchemist-mode))
       )
   #+END_SRC

** Erlang

   [[https://www.erlang.org/][Erlang]] language support.

   #+BEGIN_SRC emacs-lisp
     ;; Prevent annoying hang-on-compile
     ;; From https://www.lambdacat.com/post-modern-emacs-setup-for-erlang/
     (defvar inferior-erlang-prompt-timeout t)
   #+END_SRC

** Fennel

   [[https://fennel-lang.org/][Fennel]] language support.

   + Fennel-Mode:
     - https://gitlab.com/technomancy/fennel-mode
     - https://melpa.org/#/fennel-mode

   #+BEGIN_SRC emacs-lisp
     (use-package fennel-mode
       :ensure t
       :if (and (or (executable-find "lua") (executable-find "luajit"))
                (executable-find "fennel"))
       :defer t
       :mode
       (("\\.fnl\\'" . fennel-mode))
       )
   #+END_SRC

** Flycheck

   [[https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake][Syntax checking]]

   + Flycheck:
     - https://github.com/flycheck/flycheck
     - https://melpa.org/#/flycheck

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :diminish "FC"
       :init
       (global-flycheck-mode t)
       )
   #+END_SRC

** Go

   [[https://golang.org/][Go]] language support.

   + Go-Mode:
     - https://github.com/dominikh/go-mode.el
     - https://melpa.org/#/go-mode

   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :if (executable-find "go")
       :ensure t
       )
   #+END_SRC

** Godot

   [[https://godotengine.org/][Godot]]'s scripting language support.

   + Gdscript-Mode
     - https://github.com/godotengine/emacs-gdscript-mode
     - https://melpa.org/#/gdscript-mode

   #+BEGIN_SRC emacs-lisp
     (use-package gdscript-mode
       :if (executable-find "godot")
       :ensure t
       :config
       ;; (setq gdscript-use-tab-indents t)
       (setq
        gdscript-indent-offset 4
        gdscript-gdformat-save-and-format t
        )
       )
   #+END_SRC

** Haskell

   [[https://www.haskell.org/][Haskell]] language support.

   + Important key bindings:
     - =C-c C-l= - haskell-process-load-file (load current file into the REPL)
     - =C-c C-x= - haskell-process-cabal     (run a =cabal= command)

   + Haskell-Mode:
     - https://github.com/haskell/haskell-mode
     - https://melpa.org/#/haskell-mode

   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :if (executable-find "ghc")
       :ensure t
       :mode
       (("\\.ghci\\'" . haskell-mode))
       :hook
       ((haskell-mode . interactive-haskell-mode))
       )
   #+END_SRC

** Haxe

   [[https://haxe.org/][Haxe]] language support.

   + Haxe-Mode:
     - https://github.com/emacsorphanage/haxe-mode
     - https://melpa.org/#/haxe-mode

   #+BEGIN_SRC emacs-lisp
     (use-package haxe-mode
       :if (executable-find "haxe")
       :ensure t
       :defer t
       :hook
       ((haxe-mode . rainbow-delimiters-mode))
       :mode
       (("\\.hx\\'" . haxe-mode))
       )
   #+END_SRC

** Java

   [[https://www.java.com][JAVA]] language support.
   WARNING!: Requires [[https://jdk.java.net/][OpenJDK 11]] or higher version.

   + lsp-java:
     - https://github.com/emacs-lsp/lsp-java
     - https://melpa.org/#/lsp-java

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-java
       :if (executable-find "java")
       :ensure t
       :defer t
       :hook
       ((java-mode . lsp))
       )
   #+END_SRC

** Julia

   [[https://julialang.org/][Julia]] language support.

   + Julia-Mode:
     - https://github.com/JuliaEditorSupport/julia-emacs
     - https://melpa.org/#/julia-mode
   + Flycheck-Julia:
     - https://github.com/gdkrmr/flycheck-julia
     - https://melpa.org/#/flycheck-julia

   #+BEGIN_SRC emacs-lisp
     (use-package julia-mode
       :if (executable-find "julia")
       :ensure t
       :defer t
       :hook
       ((inferior-ess-julia-mode . rainbow-delimiters-mode))
       :mode
       (("\\.jl\\'" . ess-julia-mode))
       )
     (use-package flycheck-julia
       :if (executable-find "julia")
       :requires julia-mode
       :ensure t
       :defer t
       :hook
       (
        (ess-julia-mode . flycheck-mode)
        (julia-mode     . flycheck-mode)
        )
       )
   #+END_SRC

** JS

   [[https://www.javascript.com/][JavaScript]] language support.
   Requires =eglot= and npm packages that can be installed with:
   =npm install -g typescript typescript-language-server=

   #+BEGIN_SRC emacs-lisp
     (use-package js-mode
       :if (and (executable-find "tsserver")
                (executable-find "typescript-language-server")
                )
       :requires eglot
       :ensure nil
       :defer t
       :hook
       (js-mode . eglot-ensure)
       )
   #+END_SRC

** Lisp

   [[https://common-lisp.net/][Lisp]] language support.

   + Sly:
     - http://joaotavora.github.io/sly/
     - https://github.com/joaotavora/sly
     - https://melpa.org/#/sly

   #+BEGIN_SRC emacs-lisp
     ;; TODO: autostart slime
     (use-package sly
       :if (executable-find "sbcl")
       :ensure t
       :hook
       (
        (sly-mrepl-mode . company-mode)
        (sly-mrepl-mode . rainbow-delimiters-mode)
        )
       :config
       (setq
        inferior-lisp-program "sbcl"
        sly-mrepl-history-file-name (w-u-e-d "sly-history")
        sly-net-coding-system 'utf-8-unix
        )
       )
   #+END_SRC

** Lua

   [[http://www.lua.org/][Lua]] language support with [[http://luajit.org/][LuaJIT]].

   + Lua-Mode:
     - https://github.com/immerrr/lua-mode
     - https://melpa.org/#/lua-mode

   #+BEGIN_SRC emacs-lisp
     (use-package lua-mode
       :if (executable-find "luajit")
       :ensure t
       :defer t
       :hook
       ((lua-mode . lsp))
       :bind
       (
        :map lua-mode-map
        ("C-<return>" . lua-send-region)
        )
       :config
       (setq lua-default-application "luajit")
       )
   #+END_SRC

** Markdown

   [[https://daringfireball.net/projects/markdown][Markdown]] language support.

   + Markdown-Mode:
     - https://github.com/jrblevin/markdown-mode
     - https://melpa.org/#/markdown-mode

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode
       (
        ("README\\.md\\'" . gfm-mode)
        ("\\.md\\'" . markdown-mode)
        ("\\.markdown\\'" . markdown-mode)
        )
       :init
       (setq markdown-command "multimarkdown")
       )
   #+END_SRC

** Match words

   Highlight the same words.

   + Idle-Highlight-Mode:
     - https://github.com/nonsequitur/idle-highlight-mode
     - https://melpa.org/#/idle-highlight-mode

   #+BEGIN_SRC emacs-lisp
     (use-package idle-highlight-mode
       :ensure t
       :defer t
       :hook
       ((find-file . idle-highlight-mode))
       )
   #+END_SRC

** Maxima

   [[https://github.com/andrejv/maxima][Maxima]] language support.

   + Imath-Mode, Imaxima, Maxima-Mode:
     - [[/usr/share/emacs/site-lisp/maxima/imath.el]]
     - [[/usr/share/emacs/site-lisp/maxima/imaxima.el]]
     - [[/usr/share/emacs/site-lisp/maxima/maxima.el]]

   #+BEGIN_SRC emacs-lisp
     (use-package maxima-mode
       :if (executable-find "maxima")
       :ensure nil
       :hook
       (
        (imaxima . maxima-mode)
        (maxima . maxima-mode)
        (maxima-mode . company-mode)
        (maxima-mode . imath-mode)
        (maxima-mode . rainbow-delimiters-mode)
        )
       :mode
       (("\\.ma[cx]\\'" . maxima-mode))
       :config
       (setq imaxima-use-maxima-mode-flag t)
       )
   #+END_SRC

** Neko

   [[https://nekovm.org/][Neko]] language support.

   #+BEGIN_SRC emacs-lisp
     (use-package neko-mode
       :if (executable-find "neko")
       :ensure nil
       :defer t
       :hook
       ((neko-mode . rainbow-delimiters-mode))
       :mode
       (("\\.neko\\'" . neko-mode))
       )
   #+END_SRC

** Nim

   [[https://nim-lang.org/][Nim]] language support.

   + Nim-Mode:
     - https://github.com/nim-lang/nim-mode
     - https://melpa.org/#/nim-mode

   #+BEGIN_SRC emacs-lisp
     (use-package nim-mode
       :if (executable-find "nim")
       :ensure t
       :defer t
       )
   #+END_SRC

** OCaml

   [[https://ocaml.org/][OCaml]] language support.

   + Tuareg:
     - https://github.com/ocaml/tuareg
     - https://melpa.org/#/tuareg
   + Merlin:
     - https://github.com/ocaml/merlin
     - https://melpa.org/#/merlin
   + Dune:
     - https://github.com/ocaml/dune
     - https://melpa.org/#/dune
   + Dune-Format:
     - https://github.com/purcell/dune-format-el
     - https://melpa.org/#/dune-format

   #+BEGIN_SRC emacs-lisp
     (when (executable-find "ocaml")
       (use-package tuareg
         :ensure t
         :mode
         (
          ("\\.ml\\'" . tuareg-mode)
          ("\\.mli\\'" . tuareg-mode)
          ("\\.mlp\\'" . tuareg-mode)
          )
         :hook
         ((caml-mode . tuareg-mode))
         :config
         (setq tuareg-match-patterns-aligned t)
         )
       (use-package merlin
         :if (executable-find "ocamlmerlin")
         :ensure t
         :after tuareg
         :hook
         ((tuareg-mode . merlin-mode))
         )
       (use-package dune
         :if (executable-find "dune")
         :ensure t
         :mode
         (
          ("dune"         . dune-mode)
          ("dune-project" . dune-mode)
          )
         )
       (use-package dune-format
         :if (executable-find "dune")
         :ensure t
         :after dune
         :hook
         ((dune-mode . dune-format-on-save-mode))
         )
       )
   #+END_SRC

** Octave

   [[https://www.gnu.org/software/octave/index][Octave]] support.
   Start the Octave REPL (Inferior Octave) with =run-octave=.

   #+BEGIN_SRC emacs-lisp
     (use-package inferior-octave-mode
       :if (executable-find "octave")
       :ensure nil
       :hook
       (
        (inferior-octave-mode . company-mode)
        (inferior-octave-mode . rainbow-delimiters-mode)
        )
       :bind
       (
        :map inferior-octave-mode-map
        ;; C-up    - previous history item
        ("up" . comint-previous-input)
        ;; C-down  - next history item
        ("down" . comint-next-input)
        )
       )
   #+END_SRC

** Perl

   [[https://www.perl.org/][Perl]] language support.

   #+BEGIN_SRC emacs-lisp
     (use-package cperl-mode
       :ensure nil
       :init
       (defalias 'perl-mode 'cperl-mode)
       )
   #+END_SRC

** Powershell

   [[https://docs.microsoft.com/en-us/powershell/][Powershell]] language support.

   + Powershell:
     - https://github.com/jschaf/powershell.el
     - https://melpa.org/#/powershell

   #+BEGIN_SRC emacs-lisp
     (use-package powershell
       :ensure t
       :defer t
       :mode
       (("\\.ps1\\'" . powershell-mode))
       )
   #+END_SRC

** Prolog

   [[https://www.swi-prolog.org/][Prolog]] language support.

   #+BEGIN_SRC emacs-lisp
     (use-package prolog
       :ensure nil
       :defer t
       :hook
       ((prolog-inferior-mode . rainbow-delimiters-mode))
       :bind
       (
        :map prolog-mode-map
        ("C-<return>" . prolog-consult-region)
        )
       )
   #+END_SRC

** Proofs

   [[https://coq.inria.fr/][Coq]] & other proof assistants support.

   + Proof-General:
     - https://github.com/ProofGeneral/PG
     - https://melpa.org/#/proof-general
     - https://proofgeneral.github.io/
   + Company-Coq:
     - https://github.com/cpitclaudel/company-coq
     - https://melpa.org/#/company-coq

   #+BEGIN_SRC emacs-lisp
     (use-package proof-general
       :ensure t
       :defer t
       )

     (use-package company-coq
       :if (executable-find "coqc")
       :requires (company proof-general)
       :ensure t
       :defer t
       :hook
       (coq-mode . company-coq-mode)
       :diminish
       )
   #+END_SRC

** Python

   [[https://www.python.org/][Python]] IDE.
   WARNING: Remember to run =elpy-config= to install some necessary packages.
   DEBUG: If =~/.config/emacs/elpy/rpc_venv= is empty remove it and run =elpy-config=.

   + Elpy:
     - https://elpy.readthedocs.io
     - https://github.com/jorgenschaefer/elpy
     - https://melpa.org/#/elpy

   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :if (executable-find "python")
       :ensure t
       :defer t
       :init
       (advice-add 'python-mode :before 'elpy-enable)
       :config
       (setq
        elpy-modules (delq 'elpy-module-flymake elpy-modules)
        elpy-rpc-virtualenv-path (w-u-e-d "elpy/rpc_venv")
        python-shell-interpreter "ipython3"
        python-shell-interpreter-args "-i --simple-prompt"
        )
       )
   #+END_SRC

** R

   [[https://www.r-project.org/][R]] language support.
   Run ESS's R lang REPL with =run-ess-r=.
   Quickly run current line with =C-return=.

   + Ess:
     - https://github.com/emacs-ess/ESS
     - https://melpa.org/#/ess

   #+BEGIN_SRC emacs-lisp
     (use-package ess
       :ensure t
       :defer t
       :mode
       (("\\.R\\'" . ess-r-mode))
       )
   #+END_SRC

** Racket

   [[https://racket-lang.org/][Racket]] language support.
   + Important key bindings:
     - =f5=      - racket-run-and-switch-to-repl
     - =C-c C-.= - racket-xp-describe            (documentation in Emacs)
     - =C-c C-d= - racket-xp-documentation       (documentation in a browser)
     - =C-c C-l= - racket-logger                 (open a logger split)
     - =C-c C-r= - racket-send-region            (evaluate selected region in the REPL)
     - =M-.=     - xref-find-definitions         (from xref)

   + Racket-Mode:
     - https://github.com/greghendershott/racket-mode
     - https://melpa.org/#/racket-mode
     - https://racket-mode.com

   #+BEGIN_SRC emacs-lisp
     (use-package racket-mode
       :if (executable-find "racket")
       :ensure t
       :mode
       (
        ("\\.rkt[dl]?\\'" . racket-mode)
        ("\\.scrbl\\'" . racket-mode)
        )
       :hook
       (
        (racket-mode      . idle-highlight-mode)
        (racket-mode      . racket-xp-mode)
        (racket-repl-mode . company-mode)
        (racket-repl-mode . idle-highlight-mode)
        (racket-repl-mode . racket-unicode-input-method-enable)
        (racket-repl-mode . rainbow-delimiters-mode)
        )
       :bind
       (
        :map racket-mode-map
        ("C-<return>" . racket-send-region)
        )
       :config
       (setq racket-show-functions '(racket-show-echo-area))
       )
   #+END_SRC

** Ruby

   [[https://www.ruby-lang.org][Ruby]] language support.
   Requires =solargraph=.

   #+BEGIN_SRC emacs-lisp
     (when (executable-find "solargraph")
       (add-hook 'ruby-mode-hook 'lsp)
       (add-hook 'ruby-mode-hook 'eglot-ensure)
       )
   #+END_SRC

** Rust

   [[https://www.rust-lang.org/][Rust]] language support.

   + Rust-Mode:
     - https://github.com/rust-lang/rust-mode
     - https://melpa.org/#/rust-mode

   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :if (executable-find "rustc")
       :requires eglot
       :ensure t
       :defer t
       :hook
       (rust-mode . eglot-ensure)
       )
   #+END_SRC

** Scheme

   [[http://www.scheme-reports.org/][Scheme]] language support.

   + Geiser:
     - https://gitlab.com/emacs-geiser/geiser
     - https://melpa.org/#/geiser

   #+BEGIN_SRC emacs-lisp
     (use-package geiser
       :ensure t
       :defer t
       :hook
       ((scheme-mode . geiser-mode))
       :diminish geiser-autodoc-mode
       :config
       (let* (
              (geiser-dir (w-u-e-d "geiser/"))
              )
         (if (not (file-exists-p geiser-dir))
             (with-temp-buffer (make-directory geiser-dir))
           )
         (setq geiser-repl-history-filename
               (concat geiser-dir "history")
               )
         )
       )
   #+END_SRC

   [[https://github.com/gambit/gambit][Gambit]] scheme support.

   + Geiser-Gambit:
     - https://gitlab.com/emacs-geiser/gambit
     - https://melpa.org/#/geiser-gambit

   #+BEGIN_SRC emacs-lisp
     (use-package geiser-gambit
       :if (executable-find "gambit")
       :ensure t
       )
   #+END_SRC

   Gambit-Mode provided by Gambit:

   #+BEGIN_SRC emacs-lisp
     (use-package gambit
       :if (file-exists-p "/usr/share/emacs/site-lisp/gambit.el")
       :ensure nil
       :defer t
       :load-path "/usr/share/emacs/site-lisp"
       :hook
       (
        (inferior-scheme-mode . gambit-inferior-mode)
        (scheme-mode          . gambit-mode)
        )
       :init
       (progn
         (autoload 'gambit-inferior-mode "gambit" "Hook Gambit mode into cmuscheme.")
         (autoload 'gambit-mode          "gambit" "Hook Gambit mode into scheme.")
         )
       :config
       (setq scheme-program-name "gsi -:d-")
       )
   #+END_SRC

   [[https://www.gnu.org/software/guile/][Guile]] scheme support.
   For me Geiser works reliably only with [[https://www.gnu.org/software/guile/][guile]].

   + Geiser-Guile:
     - https://gitlab.com/emacs-geiser/guile
     - https://melpa.org/#/geiser-guile
   + Flycheck-Guile:
     - https://github.com/flatwhatson/flycheck-guile
     - https://melpa.org/#/flycheck-guile

   #+BEGIN_SRC emacs-lisp
     (use-package geiser-guile
       :if (executable-find "guile")
       :ensure t
       )
     (use-package flycheck-guile
       :if (executable-find "guile")
       :requires geiser-guile
       :ensure t
       )
   #+END_SRC

   Don't use scheme-mode in Racket files.

   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist (delete '("\\.rkt\\'" . scheme-mode) auto-mode-alist))
   #+END_SRC

** Tabs

   Tab settings.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
     (setq
      js-indent-level 4
      c-basic-offset 4
      css-indent-offset 4
      sh-basic-offset 4
      )
   #+END_SRC

   Highlight indentation.

   + Highlight-Indentation:
     - https://github.com/antonj/Highlight-Indentation-for-Emacs
     - https://melpa.org/#/highlight-indentation
     - https://www.emacswiki.org/emacs/HighlightIndentation

   #+BEGIN_SRC emacs-lisp
     (use-package highlight-indentation
       :ensure t
       :defer t
       :diminish
       :hook
       ((find-file . highlight-indentation-mode))
       )
   #+END_SRC

** Vala

   [[https://wiki.gnome.org/Projects/Vala][Vala]] language support.

   + Vala-Mode:
     - https://github.com/rrthomas/vala-mode
     - https://melpa.org/#/vala-mode

   #+BEGIN_SRC emacs-lisp
     (use-package vala-mode
       :ensure t
       :hook
       ;; somehow yas is not enabled in vala-mode
       ((vala-mode . yas-minor-mode))
       )
   #+END_SRC

** Web Development

   + Enable Web Mode for:
     - [[https://whatwg.org/][HTML]]
     - [[https://www.javascript.com/][JS]]
     - [[https://www.php.net/][PHP]]
     - [[https://www.w3.org/TR/xml11/][XML]]

   + Web-Mode:
     - https://github.com/fxbois/web-mode
     - https://melpa.org/#/web-mode

   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :defer t
       :mode
       (
        ("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode)
        ("\\.[agj]sp\\'"     . web-mode)
        ("\\.as[cp]x\\'"     . web-mode)
        ("\\.blade\\.php\\'" . web-mode)
        ("\\.djhtml\\'"      . web-mode)
        ("\\.ejs\\'"         . web-mode)
        ("\\.erb\\'"         . web-mode)
        ("\\.html?\\'"       . web-mode)
        ("\\.jsp\\'"         . web-mode)
        ("\\.mustache\\'"    . web-mode)
        ("\\.php\\'"         . web-mode)
        ("\\.phtml\\'"       . web-mode)
        ("\\.tpl\\.php\\'"   . web-mode)
        ("\\.xml\\'"         . web-mode)
        )
       :config
       (setq
        web-mode-enable-auto-closing t
        web-mode-enable-auto-pairing t
        web-mode-enable-comment-keywords t
        web-mode-enable-current-element-highlight t
        web-mode-code-indent-offset 4
        web-mode-css-indent-offset 4
        web-mode-markup-indent-offset 4
        web-mode-block-padding 4
        web-mode-script-padding 4
        web-mode-style-padding 4
        )
       )
   #+END_SRC

   Tweak [[https://www.w3.org/TR/CSS2/][CSS]] support

   #+BEGIN_SRC emacs-lisp
     (add-hook 'css-mode-hook 'company-mode)
   #+END_SRC

** Yaml

   [[https://yaml.org][Yaml]] language support.

   + Yaml-Mode:
     - https://github.com/yoshiki/yaml-mode
     - https://melpa.org/#/yaml-mode

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t
       :mode
       (
        ;; Saltstack
        ("\\.sls\\'" . yaml-mode)
        )
       :bind
       (
        :map yaml-mode-map
        ("C-m" . newline-and-indent)
        )
       )
   #+END_SRC

** Yasnippet

   [[https://github.com/AndreaCrotti/yasnippet-snippets][Code snippets]].

   + Yasnippet:
     - https://github.com/joaotavora/yasnippet
     - https://melpa.org/#/yasnippet
   + Yasnippet-Snippets:
     - https://github.com/AndreaCrotti/yasnippet-snippets
     - https://melpa.org/#/yasnippet-snippets

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer 3
       :config
       (progn
         (setq yas-snippet-dirs
               (list
                (w-u-e-d "assets/snippets")
                yasnippet-snippets-dir
                )
               )
         (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")
         (defun company-mode/backend-with-yas (backend)
           (if (or
                (not company-mode/enable-yas)
                (and (listp backend) (member 'company-yasnippet backend))
                )
               backend
             (append
              (if (consp backend) backend (list backend))
              '(:with company-yasnippet)
              )
             )
           )
         (setq company-backends
               (mapcar #'company-mode/backend-with-yas company-backends)
          )
         (yas-global-mode t)
         (yas-reload-all)
         )
       )
     (use-package yasnippet-snippets
       :ensure t
       :requires yasnippet
       )
   #+END_SRC


* Org

** Main

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure nil
       :bind
       (
        :map org-mode-map
        ;; with =C-c i= insert structure template
        ("C-c i" . org-insert-structure-template)
        )
       :diminish org-src-mode
       :config
       (setq
        ;; wth =C-c '= replace the original .org file with editor.
        org-src-window-setup 'current-window
        ;; word wrap
        org-startup-truncated nil
        )
       )
   #+END_SRC

** Agenda

   My Org agenda

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-l a") 'org-agenda)
     (setq
      org-agenda-files
      (list
       "~/Documents/todo.org"
       )
      )
   #+END_SRC

   Create todo.org if it does not exist

   #+BEGIN_SRC emacs-lisp
     (if (not (file-exists-p "~/Documents/todo.org"))
         (with-temp-buffer
           (write-file "~/Documents/todo.org")
           )
       )
   #+END_SRC

** Bullets

   Make Org look prettier.

   + Org-Bullets:
     - https://github.com/integral-dw/org-bullets
     - https://melpa.org/#/org-bullets

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :if window-system
       :ensure t
       :hook
       ((org-mode . org-bullets-mode))
       )
   #+END_SRC

** Deft

   My deft setup.

   + Deft:
     - https://github.com/jrblevin/deft
     - https://melpa.org/#/deft

   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :ensure t
       :defer t
       :bind
       (("<f8>" . deft))
       :commands (deft)
       :config
       (setq
        deft-directory "~/Documents/Diary"
        deft-extensions '("md" "org" "rst" "tex" "text" "txt")
        )
       )
   #+END_SRC

   Create Diary if it does not exist.

   #+BEGIN_SRC emacs-lisp
     (if (not (file-exists-p "~/Documents/Diary"))
         (with-temp-buffer
           (make-directory "~/Documents/Diary")
           )
       )
   #+END_SRC


* Misc Plugins

** Dashboard

   + Dashboard:
     - https://github.com/emacs-dashboard/emacs-dashboard
     - https://melpa.org/#/dashboard

   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (progn
         (dashboard-setup-startup-hook)
         (setq
          dashboard-banner-logo-title-face t
          dashboard-center-content         t
          dashboard-set-file-icons         t
          dashboard-set-heading-icons      t
          dashboard-startup-banner         'logo
          inhibit-startup-message          t
          inhibit-startup-screen           t
          show-week-agenda-p               t
          )
         (setq dashboard-items
               '(
                 (recents  . 5)
                 (projects . 5)
                 )
               )
         (add-to-list 'dashboard-items '(agenda) t)
         )
       )
   #+END_SRC

** Dired

   Dired configuration

   #+BEGIN_SRC emacs-lisp
     (setq-default
      dired-auto-revert-buffer t
      dired-listing-switches "-ahl"
      dired-recursive-copies 'always
      )
   #+END_SRC

   Expand directories.

   + Dired-Subtree:
     - https://github.com/Fuco1/dired-hacks
     - https://melpa.org/#/dired-subtree

   #+BEGIN_SRC emacs-lisp
     (use-package dired-subtree
       :ensure t
       :after dired
       :bind
       (
        :map dired-mode-map
        ("<tab>" . dired-subtree&revert-toggle)
        ("i"     . dired-subtree&revert-insert)
        (";"     . dired-subtree&revert-remove)
        )
       :config
       (progn
         ;; Make the spacing a little bigger (default is 2 spaces).
         (setq dired-subtree-line-prefix "   ")
         ;; Create new functions that also revert the dired buffer.
         (defun dired-subtree&revert-toggle ()
           "Run `dired-subtree-toggle' and revert the dired buffer."
           (interactive)
           (dired-subtree-toggle)
           (revert-buffer)
           )
         (defun dired-subtree&revert-insert ()
           "Run `dired-subtree-toggle' and revert the dired buffer."
           (interactive)
           (dired-subtree-insert)
           (revert-buffer)
           )
         (defun dired-subtree&revert-remove ()
           "Run `dired-subtree-toggle' and revert the dired buffer."
           (interactive)
           (dired-subtree-remove)
           (revert-buffer)
           )
         )
       )
   #+END_SRC

   Sidebar for Emacs leveraging Dired

   + Dired-Sidebar:
     - https://github.com/jojojames/dired-sidebar
     - https://melpa.org/#/dired-sidebar

   #+BEGIN_SRC emacs-lisp
     (use-package dired-sidebar
       :ensure t
       :defer t
       :commands
       (dired-sidebar-toggle-sidebar)
       :bind
       (
        :map my-keymap
        ("d" . dired-sidebar-toggle-sidebar)
        )
       )
   #+END_SRC

** Eshell

   Emacs Shell

   #+BEGIN_SRC emacs-lisp
     (defun split-and-start-eshell ()
       "Split and start the Emacs shell."
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1)
       (eshell)
       )

     (use-package eshell
       :ensure nil
       :hook
       (
        (eshell-mode . company-mode)
        (eshell-mode . idle-highlight-mode)
        (eshell-mode . rainbow-delimiters-mode)
        )
       :bind
       (
        ("<f7>" . split-and-start-eshell)
        )
       :config
       (progn
         ;; Prompt
         (setq eshell-highlight-prompt t)
         ;; Aliases
         (defalias 'open 'find-file-other-window)
         (defalias 'clean 'eshell/clear-scrollback)
         )
       )
   #+END_SRC

** Guix

   [[https://guix.gnu.org/][Guix]] package manager support.

   + Guix:
     - https://emacs-guix.gitlab.io/website/
     - https://github.com/alezost/guix.el
     - https://gitlab.com/emacs-guix/emacs-guix
     - https://melpa.org/#/guix

   #+BEGIN_SRC emacs-lisp
     (use-package guix
       :if (executable-find "guix")
       :ensure t
       :defer t
       :commands (guix)
       )
   #+END_SRC

** IRC

   [[https://freenode.net/][IRC]] with [[https://www.gnu.org/software/emacs/manual/html_mono/erc.html][ERC]].

   #+BEGIN_SRC emacs-lisp
     ;; Channels to autojoin
     (setq
      erc-autojoin-channels-alist
      '(
        ("freenode.net"
         "#NetBSD"
         "#gentoo"
         "#gentoo-chat"
         "#gentoo-dev"
         "#gentoo-guru"
         "#gentoo-laptop"
         "#gentoo-ml"
         "#gentoo-openbsd"
         "#gentoo-prefix"
         "#gentoo-proxy-maint"
         "#gentoo-qt"
         "#gentoo-server"
         "#guix"
         "#kde"
         "#lisp"
         "#termux"
         )
        ("irc.rizon.net"
         "#cloveros"
         )
        )
      )
   #+END_SRC

** Down/Uppercase

   =C-x C-u= to convert a region to uppercase.
   =C-x C-l= to convert a region to lowercase (downcase).

   #+BEGIN_SRC emacs-lisp
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region   'disabled nil)
   #+END_SRC

** Ranger

   + Ranger:
     - https://github.com/ralesi/ranger.el
     - https://melpa.org/#/ranger

   #+BEGIN_SRC emacs-lisp
     (use-package ranger
       :ensure t
       :defer t
       :commands (ranger ranger-go)
       :bind
       (
        :map my-keymap
        ("n" . ranger)
        )
       :config
       (setq
        ranger-cleanup-eagerly t
        ranger-cleanup-on-disable t
        ranger-show-hidden t
        )
       )
   #+END_SRC

** Reveal.js

   Export ORG mode contents to Reveal.js HTML presentations.
   Use =C-c C-e R R= to export to HTML file.

   + Htmlize:
     - https://github.com/hniksic/emacs-htmlize
     - https://melpa.org/#/htmlize
   + Ox-Reveal:
     - https://github.com/yjwen/org-reveal
     - https://melpa.org/#/ox-reveal

   #+BEGIN_SRC emacs-lisp
     ;; reveal dependency
     (use-package htmlize
       :ensure t
       )
     (use-package ox-reveal
       :after htmlize
       :ensure t
       :config
       ;; TODO: add auto-installer
       (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
       )
   #+END_SRC

** Treemacs

   File tree project explorer.

   + Treemacs:
     - https://github.com/Alexander-Miller/treemacs
     - https://melpa.org/#/treemacs

   #+BEGIN_SRC emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t
       :bind
       (
        :map my-keymap
        ("t 1" . treemacs-delete-other-windows)
        ("t b" . treemacs-bookmark)
        ("t f" . treemacs-find-file)
        ("t g" . treemacs-find-tag)
        ("t t" . treemacs)
        )
       :config
       (progn
         (setq
          treemacs-follow-after-init t
          treemacs-position 'left
          )
         (treemacs-follow-mode t)
         (treemacs-resize-icons 18)
         )
       )
     (use-package treemacs-all-the-icons
       :if window-system
       :after (all-the-icons treemacs)
       :ensure t
       :config
       (treemacs-load-theme "all-the-icons")
       )
     (use-package treemacs-projectile
       :after (treemacs projectile)
       :ensure t
       )
     (use-package treemacs-magit
       :after (treemacs magit)
       :ensure t
       )
   #+END_SRC

** Vterm Terminal

   [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]] uses [[https://github.com/neovim/libvterm][libvterm]].
   Installation of libvterm will be performed automatically if the prerequisites are met:
   - Emacs with module support
   - cmake
   - make
   - libtool
   - git
   Load vterm only in GUI.

   + Vterm:
     - https://github.com/akermu/emacs-libvterm
     - https://melpa.org/#/vterm

   #+BEGIN_SRC emacs-lisp
     (use-package vterm
       :if (and window-system (eq system-type 'gnu/linux))
       :ensure t
       :defer t
       :bind
       (("<f2>" . vterm))
       :hook
       (
        (vterm-mode . idle-highlight-mode)
        )
       :config
       (setq vterm-shell '"${SHELL} -l")
       )
   #+END_SRC


* Games

** Built-in

   [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Amusements.html][47 Games and Other Amusements]]

** Scores

   Set a directory for games saves/scores.

   #+BEGIN_SRC emacs-lisp
     (defvar games-saves-directory (w-u-e-d "games/")
       "Directory for games saves/scores.")
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (if (not (file-exists-p games-saves-directory))
         (with-temp-buffer
           (make-directory games-saves-directory)
           )
       )
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (defun with-games-saves-directory (file)
       "Return a path to FILE prepended with 'games-saves-directory'."
       (concat games-saves-directory file)
       )
     (defalias 'in-games-saves 'with-games-saves-directory)
   #+END_SRC

** 2048

   + 2048-Game:
     - https://github.com/emacsmirror/2048-game
     - https://hg.sr.ht/~zck/game-2048
     - https://melpa.org/#/2048-game

   #+BEGIN_SRC emacs-lisp
     (use-package 2048-game
       :ensure t
       :defer t
       :commands (2048-game)
       )
   #+END_SRC

** Eight-puzzle
   #+BEGIN_SRC emacs-lisp
     (use-package eight-puzzle
       :ensure nil
       :defer t
       :commands (eight-puzzle)
       )
   #+END_SRC
** Jumblr

   + Jumblr:
     - https://github.com/mkmcc/jumblr
     - https://melpa.org/#/jumblr

   #+BEGIN_SRC emacs-lisp
     (use-package jumblr
       :ensure t
       :defer t
       :commands (jumblr)
       )
   #+END_SRC

** Minesweeper

   + Minesweeper:
     - https://melpa.org/#/minesweeper
     - https://hg.sr.ht/~zck/minesweeper

   #+BEGIN_SRC emacs-lisp
     (use-package minesweeper
       :ensure t
       :defer t
       :commands (minesweeper)
       )
   #+END_SRC

** Sudoku

   + Sudoku:
     - https://github.com/zevlg/sudoku.el
     - https://melpa.org/#/sudoku

   #+BEGIN_SRC emacs-lisp
     (use-package sudoku
       :ensure t
       :defer t
       :commands (sudoku)
       )
   #+END_SRC

** The Typing of Emacs

   + Typing:
     - https://github.com/kensanata/typing
     - https://melpa.org/#/typing
     - https://www.emacswiki.org/emacs/TypingOfEmacs

   #+BEGIN_SRC emacs-lisp
     (use-package typing
       :ensure t
       :defer t
       :config
       (setq toe-highscore-file (in-games-saves "toe-scores"))
       )
   #+END_SRC
