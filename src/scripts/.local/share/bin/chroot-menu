#!/bin/sh


# This file is part of mydot.

# mydot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.

# mydot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with mydot.  If not, see <https://www.gnu.org/licenses/>.

# Copyright (c) 2020-2021, Maciej Barć <xgqt@riseup.net>
# Licensed under the GNU GPL v3 License

# A simle chrooting script

# Chroot to a directory
# or mount a device as
# /mnt/mychroot-<device>
# and chroot into it


prog_name="$(basename "${0}")"
prog_desc="chroot interactively"
prog_args=""


usage() {
    cat <<EOF
Usage: ${prog_name} [OPTION]... ${prog_args}
${prog_name} - ${prog_desc}

Options:
    -V, --version  show program version
    -h, --help     show avalible options
EOF
}

version() {
    cat <<EOF
${prog_name} 9999

Copyright (c) 2020-2021, Maciej Barć <xgqt@riseup.net>
Licensed under the GNU GPL v3 License
EOF
}

mount_dpst() {
    # dev
    echo "Mounting dev on ${target_dir}/dev..."; sleep 1
    mount --rbind /dev "${target_dir}"/dev
    mount --make-rslave "${target_dir}"/dev

    # proc
    echo "Mounting proc on ${target_dir}/proc..."; sleep 1
    mount -t proc /proc "${target_dir}"/proc

    # sys
    echo "Mounting sys ${target_dir}/sys..."; sleep 1
    mount --rbind /sys "${target_dir}"/sys
    mount --make-rslave "${target_dir}"/sys

    # tmp
    echo "Mounting tmp ${target_dir}/tmp..."; sleep 1
    mount --rbind /tmp "${target_dir}"/tmp
}

unmount_dpst() {
    # dev
    echo "Unmounting dev from ${target_dir}/dev..."; sleep 1
    umount -l "${target_dir}"/dev

    # proc
    echo "Unmounting proc from ${target_dir}/proc..."; sleep 1
    umount -l "${target_dir}"/proc

    # sys
    echo "Unmounting sys from ${target_dir}/sys..."; sleep 1
    umount -l "${target_dir}"/sys

    # tmp
    echo "Unmounting tmp from ${target_dir}/tmp..."; sleep 1
    umount -l "${target_dir}"/tmp
}

target_chroot() {
    # chroot
    echo "Chrooting to ${target_dir}..."; sleep 3
    chroot "${target_dir}" /bin/bash
}

cleanup() {
    echo "Removing ${target_dir}..."; sleep 1
    rm -d "${target_dir}"
}

main() {
    # Show devices and their mountpoints
    lsblk

    # Chroot to device or directory
    echo "Chroot to:"
    echo "[1] Device"
    echo "[2] Directory"
    echo "[3] Exit"
    read -r d_or_d

    case "${d_or_d}"
    in
        1)
            # Device option

            echo "Select Device (type path)"

            # Example: /dev/sdb1

            read -r device
            target_dir="/mnt/mychroot-$(basename "${device}")"

            mkdir "${target_dir}"
            echo "Mounting device $device on $target_dir..."; sleep 1
            mount "${device}" "${target_dir}" || { echo "Mount failed"; cleanup; exit 1; }

            mount_dpst
            target_chroot || { echo "Chroot failed! Exiting!"; unmount_dpst; cleanup; exit 1; }

            echo "You exited the chroot"; sleep 1
            unmount_dpst
            echo "Unmounting $device from $target_dir..."; sleep 1
            umount -l "${target_dir}" || { echo "Unmount of $target_dir failed"; exit 1; }
            cleanup
            ;;
        2)
            # Directory option

            echo "Type directory path"
            read -r target_dir

            mount_dpst
            target_chroot || { echo "Chroot failed! Exiting!"; unmount_dpst;  exit 1; }

            echo "You exited the chroot"; sleep 1
            unmount_dpst
            ;;
        3)
            # Exit option

            echo "Exiting"
            ;;
        *)
            # In a different case
            # Re-run main

            echo "Unknown option. Choose 1 (device) or 2 (directory) or 3 (exit)"
            main
            ;;

    esac
}

case "${1}"
in
    -h | -help | --help )
        usage
        exit 0
        ;;
    -V | -version | --version )
        version
        exit 0
        ;;
    -* )
        version
        echo
        usage
        exit 1
        ;;
esac


if [ "$(whoami)" != root ]
then
    echo "Switching to the root user account"
    su root -c "${0} ${*}"
else
    main "${@}"
fi
