#!/usr/bin/env python


"""
This file is part of mydot.

mydot is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3.

mydot is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with mydot.  If not, see <https://www.gnu.org/licenses/>.

Copyright (c) 2020-2021, Maciej Barć <xgqt@riseup.net>
Licensed under the GNU GPL v3 License

A nice way to view Portage's world file
"""


import argparse


parser = argparse.ArgumentParser(
    description="%(prog)s - view Portage's world file",
    epilog='''Copyright (c) 2020-2021, Maciej Barć <xgqt@riseup.net>
    Licensed under the GNU GPL v3 License'''
)
parser.add_argument(
    "-V", "--version",
    action="version",
    version="%(prog)s 9999"
)
args = parser.parse_args()


try:
    import portage
    WORLD_FILE = portage.root + portage.WORLD_FILE
except ImportError:
    print("WARNING: Could not import portage")
    WORLD_FILE = "/var/lib/portage/world"


def choose_color(category):
    """Colorize"""

    color_good = "\033[92m"
    color_warn = "\033[93m"
    color_erro = "\033[91m"

    category_warn = [
        "acct-group",
        "acct-user",
        "app-crypt",
        "app-dicts",
        "app-i18n",
        "dev-libs",
        "dev-texlive",
        "gui-wm",
        "media-plugins",
        "sci-libs",
        "sys-apps",
        "sys-auth",
        "sys-firmware",
        "sys-fs",
        "sys-libs",
        "x11-apps",
        "x11-base",
        "x11-misc",
        "x11-plugins"
    ]
    category_erro = [
        "dev-libs"
        "gnustep-libs",
        "gui-libs",
        "java-virtuals",
        "media-libs",
        "net-libs",
        "sci-libs",
        "sec-policy",
        "sys-libs",
        "virtual",
        "x11-drivers",
        "x11-libs",
    ]

    if category in category_warn:
        return color_warn
    if category in category_erro:
        return color_erro
    return color_good


def parse_category(category):
    """
    Parse categories
    Add special characters
    """

    indicator = " \u25cf "

    return 4 * " " + choose_color(category) + indicator + category


def main():
    """Main"""

    with open(WORLD_FILE) as world:

        category_tmp = ""
        group_tmp = ""
        category_count = 0
        package_count = 0

        for line in sorted(world.read().splitlines()):

            read_category = line.split("/")[0]
            read_group = read_category.split("-")[0]
            read_name = line.split("/")[1]

            if read_group != group_tmp:
                print("\033[97m" + " \u25cb " + str.upper(read_group))
                group_tmp = read_group

            if read_category != category_tmp:
                print(parse_category(read_category))
                category_tmp = read_category
                category_count += 1

            print("{}\033[94m - {}".format(8 * " ", read_name))
            package_count += 1

        # Reset color + newline
        print("\033[0m")

        print("{} categories".format(category_count))
        print("{} packages".format(package_count))


if __name__ == "__main__":
    main()
