#!/usr/bin/env python


"""
This file is part of mydot.

mydot is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

mydot is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with mydot.  If not, see <https://www.gnu.org/licenses/>.

Copyright (c) 2020-2021, Maciej BarÄ‡ <xgqt@protonmail.com>
Licensed under the GNU GPL v3 License

A nice way to view Portage's world file
"""


try:
    import portage
    WORLD_FILE = portage.root + portage.WORLD_FILE
except ImportError:
    print("WARNING: Could not import portage")
    WORLD_FILE = "/var/lib/portage/world"


def choose_color(category):

    """
    Colorize
    """

    color_good = "\033[92m"
    color_warn = "\033[93m"
    color_erro = "\033[91m"

    category_warn = [
        "acct-group",
        "acct-user",
        "app-crypt",
        "app-dicts",
        "app-i18n",
        "dev-texlive",
        "gui-wm",
        "media-plugins",
        "sci-libs",
        "sys-apps",
        "sys-auth",
        "sys-firmware",
        "sys-fs",
        "sys-libs",
        "x11-apps",
        "x11-base",
        "x11-misc",
        "x11-plugins"
    ]
    category_erro = [
        "dev-libs"
        "gnustep-libs",
        "gui-libs",
        "java-virtuals",
        "media-libs",
        "net-libs",
        "sci-libs",
        "sec-policy",
        "sys-libs",
        "virtual",
        "x11-drivers",
        "x11-libs",
    ]

    if category in category_warn:
        return color_warn
    if category in category_erro:
        return color_erro
    return color_good


def parse_category(category):

    """
    Parse categories
    Add special characters
    """

    indicator = " \u25cf "

    return 4 * " " + choose_color(category) + indicator + category


with open(WORLD_FILE) as world:

    CATEGORY_TMP = ""
    GROUP_TMP = ""
    CATEGORY_COUNT = 0
    PACKAGE_COUNT = 0

    for line in sorted(world.read().splitlines()):

        read_category = line.split("/")[0]
        read_group = read_category.split("-")[0]
        read_name = line.split("/")[1]

        if read_group != GROUP_TMP:
            print("\033[97m" + " \u25cb " + str.upper(read_group))
            GROUP_TMP = read_group

        if read_category != CATEGORY_TMP:
            print(parse_category(read_category))
            CATEGORY_TMP = read_category
            CATEGORY_COUNT += 1

        print("{}\033[94m - {}".format(8 * " ", read_name))
        PACKAGE_COUNT += 1

    # Reset color + newline
    print("\033[0m")

    print("{} categories".format(CATEGORY_COUNT))
    print("{} packages".format(PACKAGE_COUNT))
